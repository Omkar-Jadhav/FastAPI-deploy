[
    {
        "label": "Groq",
        "importPath": "groq",
        "description": "groq",
        "isExtraImport": true,
        "detail": "groq",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "flask",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flask",
        "description": "flask",
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "ai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ai",
        "description": "ai",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "ai",
        "description": "ai",
        "isExtraImport": true,
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "get_insights_by_llm",
        "importPath": "ai",
        "description": "ai",
        "isExtraImport": true,
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "get_insights_by_llm",
        "importPath": "ai",
        "description": "ai",
        "isExtraImport": true,
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "strava",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "strava",
        "description": "strava",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database",
        "description": "database",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "strava_v2_testing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "format_prompt_for_llm",
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "isExtraImport": true,
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "workout_classifier_testing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "workout_classifier_testing",
        "description": "workout_classifier_testing",
        "detail": "workout_classifier_testing",
        "documentation": {}
    },
    {
        "label": "markdown2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "markdown2",
        "description": "markdown2",
        "detail": "markdown2",
        "documentation": {}
    },
    {
        "label": "certifi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "certifi",
        "description": "certifi",
        "detail": "certifi",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo.mongo_client",
        "description": "pymongo.mongo_client",
        "isExtraImport": true,
        "detail": "pymongo.mongo_client",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo.mongo_client",
        "description": "pymongo.mongo_client",
        "isExtraImport": true,
        "detail": "pymongo.mongo_client",
        "documentation": {}
    },
    {
        "label": "test_plan_data",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "test_plan_data",
        "description": "test_plan_data",
        "detail": "test_plan_data",
        "documentation": {}
    },
    {
        "label": "athlete_id",
        "importPath": "test_plan_data",
        "description": "test_plan_data",
        "isExtraImport": true,
        "detail": "test_plan_data",
        "documentation": {}
    },
    {
        "label": "tabulate",
        "importPath": "tabulate",
        "description": "tabulate",
        "isExtraImport": true,
        "detail": "tabulate",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "convert_seconds_in_hhmmss",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_speed_in_kmph",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_speed",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_pace_minKm",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_pace_minKm",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "wsgi",
        "description": "wsgi",
        "isExtraImport": true,
        "detail": "wsgi",
        "documentation": {}
    },
    {
        "label": "time,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time.",
        "description": "time.",
        "detail": "time.",
        "documentation": {}
    },
    {
        "label": "data_processing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "data_processing",
        "description": "data_processing",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "workout_classifier",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "workout_classifier",
        "description": "workout_classifier",
        "detail": "workout_classifier",
        "documentation": {}
    },
    {
        "label": "get_run_type",
        "importPath": "workout_classifier",
        "description": "workout_classifier",
        "isExtraImport": true,
        "detail": "workout_classifier",
        "documentation": {}
    },
    {
        "label": "get_run_type",
        "importPath": "workout_classifier",
        "description": "workout_classifier",
        "isExtraImport": true,
        "detail": "workout_classifier",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_insights_by_llm",
        "kind": 2,
        "importPath": "ai",
        "description": "ai",
        "peekOfCode": "def get_insights_by_llm(avg_stats, past_runs):\n    inp_message = f\"\"\"Act as a helpful running coach. \nPresent insights and key data points from the athlete's past 4 weeks of running activity in under 100 words. Sugggest a general focus for upcoming week, and suggested acticvities for next 2 days. \nAvoid mentioning obvious statistics from summary. Do not use first person voice.\nEncourage, motivate, and applaud the athlete. \nThe workout history includes various runs like long runs, tempo runs, easy runs, recovery runs, intervals, and trail run, with additional details for some activities such as lap times, average pace, and total elevation gain. Based on the recent workouts/intervals/long runs or races in last 5 workouts suggest upcoming weeks focus. Workouts are numbered by a descending order of date. Take a comprehensive approah in suggesting the workouts considering the athlete's past runs where depending on recent workouts you should suggest easy runs/ tempo runs/ intervals/ long runs/ hill workouts or a recovery run.  \nIf past runs are not available, then only suggest a general focus for the upcoming week and activities for the next 2 days. Use at most 3/4 emojis to make the message more engaging only if necessary.\nHere is the athlete's workout history.\n4 week rolling summary: {avg_stats}\nPrevious 4 weeks running history: {past_runs}\"\"\"",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "analyse_past_3m_runs",
        "kind": 2,
        "importPath": "ai",
        "description": "ai",
        "peekOfCode": "def analyse_past_3m_runs(activities, athlete_baseline):\n    inp_message = f\"\"\"Act as a helpful and professiona running coach and data analyst.\n    You are presented with the workout history of an athlete for the past 3 months. \n    The athlete's past 3 months activities include various runs like long runs, tempo runs, easy runs, recovery runs, intervals, and trail run, with additional details for some activities such as lap times, average pace, and total elevation gain.\n    Analyse the athlete's past 3 months of running activity and provide a summarised version of athlete's past 3 months running history. The summary should be detailed such that based on this data further workout plans can be generated. DO NOT PROVIDE ANY SUGGSTIONS yet.\n    Past 3 months running history is as follows: {activities}\n    \"\"\"\n    completion = client.chat.completions.create(\n        model=\"llama-3.3-70b-versatile\",\n        messages=[",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "get_response_from_groq",
        "kind": 2,
        "importPath": "ai",
        "description": "ai",
        "peekOfCode": "def get_response_from_groq(inp_message):\n    completion = client.chat.completions.create(\n        # model=\"llama-3.3-70b-versatile\",\n        # model = \"llama3-70b-8192\",\n        model =\"deepseek-r1-distill-llama-70b\",\n        # model=\"llama3-8b-8192\",\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful and professional running coach.\"",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "extract_after_think",
        "kind": 2,
        "importPath": "ai",
        "description": "ai",
        "peekOfCode": "def extract_after_think(text):\n    tag = \"</think>\"\n    index = text.find(tag)\n    if index != -1:\n        return text[index + len(tag):].strip()\n    return text  # Return None if </think> is not found\ndef get_response_from_deepseek(inp_message):\n    client = OpenAI(api_key=os.environ.get(\"DEEPSEEK_API_KEY\"), base_url=\"https://api.deepseek.com\")\n    messages = [{\"role\": \"user\", \"content\": f\"{inp_message}\"}]\n    response = client.chat.completions.create(",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "get_response_from_deepseek",
        "kind": 2,
        "importPath": "ai",
        "description": "ai",
        "peekOfCode": "def get_response_from_deepseek(inp_message):\n    client = OpenAI(api_key=os.environ.get(\"DEEPSEEK_API_KEY\"), base_url=\"https://api.deepseek.com\")\n    messages = [{\"role\": \"user\", \"content\": f\"{inp_message}\"}]\n    response = client.chat.completions.create(\n        model=\"deepseek-reasoner\",\n        messages=messages\n    )\n    return response.choices[0].message.content, response.choices[0].message.reasoning_content",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "ai",
        "description": "ai",
        "peekOfCode": "client = Groq(api_key=os.environ.get(\"GROQ_API_KEY\"),)\ndef get_insights_by_llm(avg_stats, past_runs):\n    inp_message = f\"\"\"Act as a helpful running coach. \nPresent insights and key data points from the athlete's past 4 weeks of running activity in under 100 words. Sugggest a general focus for upcoming week, and suggested acticvities for next 2 days. \nAvoid mentioning obvious statistics from summary. Do not use first person voice.\nEncourage, motivate, and applaud the athlete. \nThe workout history includes various runs like long runs, tempo runs, easy runs, recovery runs, intervals, and trail run, with additional details for some activities such as lap times, average pace, and total elevation gain. Based on the recent workouts/intervals/long runs or races in last 5 workouts suggest upcoming weeks focus. Workouts are numbered by a descending order of date. Take a comprehensive approah in suggesting the workouts considering the athlete's past runs where depending on recent workouts you should suggest easy runs/ tempo runs/ intervals/ long runs/ hill workouts or a recovery run.  \nIf past runs are not available, then only suggest a general focus for the upcoming week and activities for the next 2 days. Use at most 3/4 emojis to make the message more engaging only if necessary.\nHere is the athlete's workout history.\n4 week rolling summary: {avg_stats}",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def start():\n   return render_template('index.html')\n@app.route(\"/training\")\ndef training():\n    return render_template('training_landing_pg.html')\n@app.route(\"/connectStrava\")\ndef connect_strava():\n    session_token = request.cookies.get('session_token')\n    if not session_token:\n        auth_url = (",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "training",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def training():\n    return render_template('training_landing_pg.html')\n@app.route(\"/connectStrava\")\ndef connect_strava():\n    session_token = request.cookies.get('session_token')\n    if not session_token:\n        auth_url = (\n        f\"https://www.strava.com/oauth/authorize?\"\n        f\"client_id={STRAVA_CLIENT_ID}&\" \n        f\"redirect_uri={url_for('strava_callback', _external=True)}&\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "connect_strava",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def connect_strava():\n    session_token = request.cookies.get('session_token')\n    if not session_token:\n        auth_url = (\n        f\"https://www.strava.com/oauth/authorize?\"\n        f\"client_id={STRAVA_CLIENT_ID}&\" \n        f\"redirect_uri={url_for('strava_callback', _external=True)}&\"\n        f\"response_type=code&\"\n        f\"approval_prompt=auto&\"\n        f\"scope=activity:read_all,activity:write\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "training_qna",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def training_qna():\n    # Retrieve athlete_id from session\n    athlete_id = session.get('athlete_id')\n    athlete_name = session.get('athlete_name')\n    if not athlete_id:\n        return redirect('/connectStrava')  # Redirect if no session\n    # Render the template with athlete_id\n    return render_template('training_qna.html', athlete_id=athlete_id, athlete_name=athlete_name)\n@app.route(\"/training_dashboard/<athlete_id>\")\ndef training_dashboard(athlete_id=None):  ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "training_dashboard",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def training_dashboard(athlete_id=None):  \n     # Retrieve athlete_id from session\n    athlete_id = athlete_id or session.get('athlete_id')\n    athlete_name = session.get('athlete_name')\n    next_week_plan = session.get('next_week_workout_plan')\n    goal_summary = session.get('goal_summary')\n    dates = session.get('dates')\n    if next_week_plan is None or next_week_plan==\"\":\n        dates,next_week_plan, notes,goal_summary = database.get_athelte_training_details(athlete_id)\n    # next_week_plan = test_plan_data.next_week_plan",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "join_dict_keys_values",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def join_dict_keys_values(data):\n    if isinstance(data, dict):  # Check if it's a dictionary\n        return \" \".join(f\"{key} {value}\" for key, value in data.items())\n    try:\n        # Check if it's a valid JSON string and convert it to a dictionary\n        # data = json.loads(data)  \n        if isinstance(data, dict):\n            return \" \".join(f\"{key} {value}\" for key, value in data.items())\n    except (json.JSONDecodeError, TypeError):\n        pass",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "process_user_input",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def process_user_input():\n    chat_history = request.json.get('messages')\n    current_plan =request.json.get('next_week_plan')\n    goal_summary = request.json.get('goal_summary')\n    athlete_id =request.json.get('athlete_id')\n    athlete_message, chat_history = get_last_athlete_msg_and_chat(chat_history)\n    # Step 1: Check relevance\n    is_athlete_msg_relevant = is_user_input_relevant(athlete_message, current_plan, goal_summary,chat_history) \n    if is_athlete_msg_relevant == 'relevant':\n        # Step 2: Call GPT for plan update",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "parse_workout_plan",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def parse_workout_plan(text):\n    # Extracting dates\n    date_start_idx = text.find(\"Dates: \")\n    if date_start_idx != -1:\n        date_end_idx = text.find(\"\\n\", date_start_idx)\n        date_range = text[date_start_idx + len(\"Dates: \"):date_end_idx].strip()\n        dates = date_range.split(\" - \") if date_range else None\n        if dates:\n            dates = \"-\".join(dates)\n    else:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "parse_workout_plan_",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def parse_workout_plan_(text):\n    # Extracting Dates\n    dates = re.search(r\"\\s*(\\d{2}/\\d{2}/\\d{4})\\s*-\\s*(\\d{2}/\\d{2}/\\d{4})\", text)\n    dates = dates.groups() if dates else None\n    if dates:\n        dates = \"-\".join(dates)\n    # Extracting Workouts\n    workouts = {}\n    workout_pattern = r\"#### (\\w+)\\s*-([^#]+)\"\n    workout_matches = re.findall(workout_pattern, text)  ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_last_athlete_msg_and_chat",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_last_athlete_msg_and_chat(chat_history):\n    if chat_history:\n    # Get the last athlete input\n        last_athlete_message = chat_history[-1]\n        if last_athlete_message['sender'] == 'Athlete':\n            last_athlete_input = last_athlete_message['message']\n            # Combine all previous messages into a single string\n            previous_messages = \" \".join(\n                f\"{msg['sender']}: {msg['message']}\" \n                for msg in chat_history[:-1]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "work_on_user_query",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def work_on_user_query(user_input, current_plan, goal_summary):\n    prompt=f\"\"\"\n    Act as a professional running coach. The user may have queries, suggestions, inputs, or changes regarding the training plan you previously provided. Today is {datetime.now().strftime(\"%B %d, %Y\")}  and the day is {datetime.today().strftime('%A')}.\nYour task is to respond to these queries, incorporating the athlete’s goals and needs. If there is a change in the plan, provide the updated version for the entire week, reflecting any modifications. For general questions about training, just respond directly. \nTo update the workout plan, follow these instructions:\nGenerate a complete workout plan: Include the type of runs (e.g., intervals, tempo), distance, pace, and other relevant details for each day.\nConsider a holistic approach: Address the athlete’s strengths, weaknesses, and specific requirements.\nEnsure injury prevention: Strive to keep the athlete injury-free while improving fitness levels.\nIncorporate strength and mobility workouts: Add these workouts as needed, based on the athlete’s requirements. Specify the type of exercises for strength and mobility sessions.\nInclude rest days: Ensure proper recovery is accounted for, including rest days.",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "extract_response_and_plan_status",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def extract_response_and_plan_status(gpt_output):\n    # Find the position of the \"Response:\" keyword\n    response_start_idx = gpt_output.find(\"Response:\")\n    if response_start_idx == -1:\n        return None, None  # Return None if \"Response:\" is not found\n    # Find the position of the next line starting with \"is_plan_updated:\"\n    is_plan_updated_start_idx = gpt_output.find(\"is_plan_updated:\", response_start_idx)\n    if is_plan_updated_start_idx == -1:\n        # If \"is_plan_updated:\" is not found, assume it’s at the end of the string\n        is_plan_updated_start_idx = len(gpt_output)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "is_user_input_relevant",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def is_user_input_relevant(user_input, next_week_plan, goal_summary, messages):\n    prompt=f\"\"\"\n    You are a chat reviewer. \n    The chat you have to review is in between an athlete and a coach. You have to predict if the athlete input is relevant with the discussion or not. You are provided with athlete goal summary, his next weeks plan coach has provided, previous chat discussion.\n    The athlete may ask for queries/suggestions/changes/questions/details/strategies etc.\n    If the user input is relevant with the discussion you have return only one word - \"relevant\". \n    If the user input is not relevatnt with discussion you have to return only following words - \"not relevant\" \n    The output should only \"relevant\" or \"not relevant\", and nothing else no explanation is required.\n    Here's the chat history - {messages}\n    Athlete goal is  -{goal_summary}",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "strava_callback",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def strava_callback():\n    error = request.args.get('error')\n    if error:\n        return f\"Strava authorization failed: {error}\"\n    auth_code = request.args.get('code')\n    if not auth_code:\n        return \"Authorization code missing\", 400\n    try:\n        token_response = exchange_code_for_token(auth_code)\n        athlete = token_response.get('athlete')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "exchange_code_for_token",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def exchange_code_for_token(code):\n    data = {\n        'client_id': STRAVA_CLIENT_ID,\n        'client_secret': STRAVA_CLIENT_SECRET,\n        'code': code,\n        'grant_type': 'authorization_code'\n    }\n    STRAVA_TOKEN_URL = f\"https://www.strava.com/oauth/token\"\n    response = requests.post(STRAVA_TOKEN_URL, data=data)\n    return response.json()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generate_plan_for_new_user",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generate_plan_for_new_user():\n    form_data = request.json\n    athlete_id = form_data.get('athlete_id', '')\n    athlete_name = form_data.get('athlete_name','')\n    client = database.initiate_mango_connection()\n    athlete_present_in_training =database.check_athlete_in_training_data(client, athlete_id)\n    database.close_client(client)\n    if not athlete_present_in_training:\n        all_activities_3_mnths = strava.get_activities_for_period(12, athlete_id, sport_type='Run')\n        all_activities_3_mnths_combined =  list(itertools.chain(*all_activities_3_mnths))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_goal_summary_prompt",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_goal_summary_prompt(goals):\n    goal_summary_prompt = f\"\"\"\n    Summarise this athlete goals shortly.\n    {goals}\n    \"\"\"\n    return goal_summary_prompt\ndef generate_goal_prompt(form_data, top_3_long_runs, races):\n    goal_type = form_data.get('goalType', '') \n    goal = form_data.get('goal', '')\n    target_date = form_data.get('targetDate', '')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generate_goal_prompt",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generate_goal_prompt(form_data, top_3_long_runs, races):\n    goal_type = form_data.get('goalType', '') \n    goal = form_data.get('goal', '')\n    target_date = form_data.get('targetDate', '')\n    training_days = form_data.get('trainingDays', '')\n    fitness_level = form_data.get('fitnessLevel', '')\n    recent_performance = form_data.get('recentPerformance', '')\n    strength_sessions = form_data.get('strengthSessions', '')\n    time_commitment = form_data.get('timeCommitment', '')\n    injuries = form_data.get('injuries', '')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def health_check():\n    return jsonify({\"status\": \"healthy\"})\n@app.route('/webhook', methods=['GET', 'POST'])\ndef webhook():\n    if request.method == 'GET':\n        return verify_webhook()\n    elif request.method == 'POST':\n        return handle_webhook()\n@app.route('/getCode')\ndef get_code():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "webhook",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def webhook():\n    if request.method == 'GET':\n        return verify_webhook()\n    elif request.method == 'POST':\n        return handle_webhook()\n@app.route('/getCode')\ndef get_code():\n    return render_template('code.html')\n@app.route('/saveRefreshToken', methods=['POST'])\ndef save_refresh_token():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_code",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_code():\n    return render_template('code.html')\n@app.route('/saveRefreshToken', methods=['POST'])\ndef save_refresh_token():\n    data = request.get_json()\n    refresh_token = data.get('refresh_token')\n    athlete = data.get('athlete')\n    if not (refresh_token and athlete):\n        return jsonify({\"error\": \"Invalid data format\"}), 400\n    athlete_id = athlete.get('id')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "save_refresh_token",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def save_refresh_token():\n    data = request.get_json()\n    refresh_token = data.get('refresh_token')\n    athlete = data.get('athlete')\n    if not (refresh_token and athlete):\n        return jsonify({\"error\": \"Invalid data format\"}), 400\n    athlete_id = athlete.get('id')\n    athlete_name = f\"{athlete.get('firstname')} {athlete.get('lastname')}\"\n    try:\n        client = database.initiate_mango_connection()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "auth_success_page",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def auth_success_page():\n    return render_template('authSuccessPage.html')    \n@app.route('/alreadyAuthorized')\ndef already_authorized():\n    return render_template('alreadyAuthorized.html')    \ndef generate_next_week_plan(dates, last_week_plan, goal_summary, past_week_activity_dtls, athlete_id):\n    today = datetime.today()\n    prev_start_date = datetime.strptime(dates[0].strip(), '%d/%m/%Y')\n    prev_end_date = datetime.strptime(dates[1].strip(), '%d/%m/%Y')\n    next_week_avail = False",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "already_authorized",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def already_authorized():\n    return render_template('alreadyAuthorized.html')    \ndef generate_next_week_plan(dates, last_week_plan, goal_summary, past_week_activity_dtls, athlete_id):\n    today = datetime.today()\n    prev_start_date = datetime.strptime(dates[0].strip(), '%d/%m/%Y')\n    prev_end_date = datetime.strptime(dates[1].strip(), '%d/%m/%Y')\n    next_week_avail = False\n    next_week_plan = last_week_plan\n    if prev_start_date< today and today >= prev_end_date:\n        next_week_avail = True",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generate_next_week_plan",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generate_next_week_plan(dates, last_week_plan, goal_summary, past_week_activity_dtls, athlete_id):\n    today = datetime.today()\n    prev_start_date = datetime.strptime(dates[0].strip(), '%d/%m/%Y')\n    prev_end_date = datetime.strptime(dates[1].strip(), '%d/%m/%Y')\n    next_week_avail = False\n    next_week_plan = last_week_plan\n    if prev_start_date< today and today >= prev_end_date:\n        next_week_avail = True\n        last_week_acitivity = strava.get_activities_for_period(1, athlete_id, sport_type='Run')\n        last_week_acitivity =list(itertools.chain(*last_week_acitivity))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_next_week_plan",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_next_week_plan():\n    athlete_id = request.json.get('athlete_id')\n    last_week_plan =request.json.get('last_week_plan')\n    goal_summary = request.json.get('goal_summary') or ''\n    last_dates = request.json.get('dates')\n    dates = last_dates.split(\"-\")\n    next_week_avail = False\n    past_week_activity_dtls_ = strava.get_activities_for_period(1, athlete_id, sport_type='Run')\n    past_week_activity_dtls= \"\\n\".join([f\"{i+1}. {run_type}\" for i, run_type in enumerate(past_week_activity_dtls_)])\n    next_week_avail, next_week_plan = generate_next_week_plan(dates, last_week_plan, goal_summary, past_week_activity_dtls)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "format_next_week_prompt_for_llm",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def format_next_week_prompt_for_llm(last_week_plan, goal_summary, past_week_activity_dtls):\n    prompt= f\"\"\"\n    You are a professional running coach. You are a helpful, friendly but strict coach.\n    As a strict coach keep your athletes on their toes and make them accountable for their missed run activities or workouts. However, you also help them to plan for their running goals in a friendly manner.\n    Today is {datetime.now().strftime(\"%B %d, %Y\")} and the day is {datetime.today().strftime('%A')}. The athlete's goal is - {goal_summary}.\n    For the past week the workout plan was - {last_week_plan}.\n    And the athletes past_week_run_details were - {past_week_activity_dtls}.\n    First applaud the athlete for the workouts he has followed in last week if he has done any. However, be strict and keep the athlete accountable for any missed workouts from the provided plan.\n    Next generate the next weeks complete workout plan. Include the type of runs, distance, pace, and any other relevant details. provide a detailed workout plan.\n    Keep a holistic nature while developing the plan considering strenghts, weaknesses and specific requirements of the athlete. ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "verify_webhook",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def verify_webhook():\n    mode = request.args.get('hub.mode')\n    token = request.args.get('hub.verify_token')\n    challenge = request.args.get('hub.challenge')\n    if mode == 'subscribe' and token == VERIFY_TOKEN:\n        return jsonify({\"hub.challenge\": challenge}), 200\n    else:\n        return \"Invalid verification token\", 403\ndef handle_webhook():\n    latest_activity_id = request.json.get('object_id')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "handle_webhook",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def handle_webhook():\n    latest_activity_id = request.json.get('object_id')\n    athlete_id = request.json.get('owner_id')\n    logger.info(f\"request inputs are {request.args}\")\n    print(f\"Webhook event received with activity:{latest_activity_id} for athlete ID: {athlete_id}\")\n    inputs={\n        \"activity_id\":latest_activity_id,\n        \"athlete_id\":athlete_id\n    }\n    logger.info(f\"Inputs were{inputs}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)  # Adjust logging level as needed\napp = Flask(__name__)\napp.secret_key = os.urandom(24)  # Set a secure secret key\napp.config.update(\n    SESSION_COOKIE_SAMESITE='Lax',  # Allows cookies in same-site context\n    SESSION_COOKIE_SECURE=False     # Set to True in production (HTTPS)\n)\n# Constants\nVERIFY_TOKEN = \"STRAVA\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.secret_key = os.urandom(24)  # Set a secure secret key\napp.config.update(\n    SESSION_COOKIE_SAMESITE='Lax',  # Allows cookies in same-site context\n    SESSION_COOKIE_SECURE=False     # Set to True in production (HTTPS)\n)\n# Constants\nVERIFY_TOKEN = \"STRAVA\"\nDATA_FILE = \"refresh_tokens.json\"\nSTRAVA_CLIENT_ID = os.environ.get('CLIENT_ID')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.secret_key = os.urandom(24)  # Set a secure secret key\napp.config.update(\n    SESSION_COOKIE_SAMESITE='Lax',  # Allows cookies in same-site context\n    SESSION_COOKIE_SECURE=False     # Set to True in production (HTTPS)\n)\n# Constants\nVERIFY_TOKEN = \"STRAVA\"\nDATA_FILE = \"refresh_tokens.json\"\nSTRAVA_CLIENT_ID = os.environ.get('CLIENT_ID')\nSTRAVA_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "VERIFY_TOKEN",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "VERIFY_TOKEN = \"STRAVA\"\nDATA_FILE = \"refresh_tokens.json\"\nSTRAVA_CLIENT_ID = os.environ.get('CLIENT_ID')\nSTRAVA_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n# Routes\n@app.route(\"/\")\ndef start():\n   return render_template('index.html')\n@app.route(\"/training\")\ndef training():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "DATA_FILE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "DATA_FILE = \"refresh_tokens.json\"\nSTRAVA_CLIENT_ID = os.environ.get('CLIENT_ID')\nSTRAVA_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n# Routes\n@app.route(\"/\")\ndef start():\n   return render_template('index.html')\n@app.route(\"/training\")\ndef training():\n    return render_template('training_landing_pg.html')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "STRAVA_CLIENT_ID",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "STRAVA_CLIENT_ID = os.environ.get('CLIENT_ID')\nSTRAVA_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n# Routes\n@app.route(\"/\")\ndef start():\n   return render_template('index.html')\n@app.route(\"/training\")\ndef training():\n    return render_template('training_landing_pg.html')\n@app.route(\"/connectStrava\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "STRAVA_CLIENT_SECRET",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "STRAVA_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n# Routes\n@app.route(\"/\")\ndef start():\n   return render_template('index.html')\n@app.route(\"/training\")\ndef training():\n    return render_template('training_landing_pg.html')\n@app.route(\"/connectStrava\")\ndef connect_strava():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "initiate_mango_connection",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def initiate_mango_connection():\n    \"\"\"Connects to the MongoDB database and logs success or errors.\"\"\"\n    ca = certifi.where()  # Load the updated CA bundle\n    uri = os.environ.get(\"mango_url\")\n    logger.debug(\"Connecting to MongoDB with URI: %s\", uri)\n    try:\n        # Create a new client and connect to the server\n        client = MongoClient(uri, tlsCAFile=ca)\n        logger.info(\"Before ping!\")\n        # Send a ping to confirm a successful connection",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "check_athlete_in_data",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def check_athlete_in_data(client, athlete_id):\n    \"\"\"Checks if an athlete ID exists in the database and logs results.\"\"\"\n    logger.debug(\"Checking for athlete ID %s in database\", athlete_id)\n    db = client[\"strava\"]\n    collection = db[\"refresh tokens\"]\n    logger.info(\"before find\")\n    results = collection.find({\"athlete_id\":int(athlete_id)})\n    logger.info(results)\n    for result in results:\n        # logger.debug(\"Found document: %s\", result)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "check_athlete_in_training_data",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def check_athlete_in_training_data(client, athlete_id):\n    \"\"\"Checks if an athlete ID exists in the database and logs results.\"\"\"\n    logger.debug(\"Checking for athlete ID %s in database\", athlete_id)\n    db = client[\"strava\"]\n    collection = db[\"workout_details\"]\n    logger.info(\"before find\")\n    workouts = collection.find_one({\"athlete_id\": athlete_id})\n    logger.info(workouts)\n    if workouts:\n        if len(workouts)>=1:",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "check_session_token_in_data",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def check_session_token_in_data(client, session_token):\n    logger.info(\"Checking for session token %s in database\", session_token)\n    db = client[\"strava\"]\n    collection_refresh_tokens = db[\"refresh tokens\"]\n    collection_workouts = db[\"workout_details\"]\n    results_tokens = collection_refresh_tokens.find({\"session_token\": session_token}) \n    previous_workout_plan=''\n    for result in results_tokens:\n        athlete_id = result.get(\"athlete_id\")\n        expires_at = result.get(\"expires_at\", datetime.now())",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "update_tokens",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def update_tokens(client, session_token, athlete_id):\n    \"\"\"Updates the tokens in the database and logs success or errors.\"\"\"\n    db = client[\"strava\"]\n    collection = db[\"refresh tokens\"]\n    try:\n        result = collection.update_one(\n            {\"athlete_id\": athlete_id},\n            {\"$set\": {\"session_token\": session_token}},\n        )\n        logger.info(\"Updated tokens for session token %s\", session_token)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "key_in_any_dict",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def key_in_any_dict(lst, key):\n    for dictionary in lst:\n        if key in dictionary:\n            return True\n    return False\ndef get_dict_with_key(lst, key):\n    for index, dictionary in enumerate(lst):\n        if key in dictionary:\n            return index, dictionary\n    return None, None  # Return None if the key is not found in any dictionary",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_dict_with_key",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_dict_with_key(lst, key):\n    for index, dictionary in enumerate(lst):\n        if key in dictionary:\n            return index, dictionary\n    return None, None  # Return None if the key is not found in any dictionary\ndef save_workout_plan(athlete_id, plan, dates, goal_summary='',  notes=''):\n    client = initiate_mango_connection()\n    collection = client[\"strava\"]['workout_details']\n    try:\n        workouts = collection.find_one({\"athlete_id\": athlete_id})",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "save_workout_plan",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def save_workout_plan(athlete_id, plan, dates, goal_summary='',  notes=''):\n    client = initiate_mango_connection()\n    collection = client[\"strava\"]['workout_details']\n    try:\n        workouts = collection.find_one({\"athlete_id\": athlete_id})\n        if workouts:\n            past_workouts =  workouts.get('workout_plan')\n            goal_summary = workouts.get('summary')\n            if  key_in_any_dict(past_workouts, dates):\n                index, workout =get_dict_with_key(past_workouts, dates)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "save_athlete_data",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def save_athlete_data(client, data, collection_name =\"refresh_tokens\"):\n    \"\"\"Saves or updates athlete data in the database and logs success or errors.\"\"\"\n    athlete_id = data[\"athlete_id\"]\n    refresh_token = data[\"refresh_token\"]\n    athlete_name = data[\"athlete_name\"]\n    session_token = data.get(\"session_token\", '')\n    expires_at = data.get(\"expires_at\", datetime.now())\n    previous_workout_plan = data.get(\"previous_workout_plan\", '')\n    athlete_preferences = data.get(\"athlete_preferences\", '')\n    db = client[\"strava\"]",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_access_token_for_athlete",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_access_token_for_athlete(athlete_id):\n    client=initiate_mango_connection()\n    db = client[\"strava\"]\n    collection = db[\"refresh tokens\"]\n    results = collection.find({\"athlete_id\":athlete_id})\n    logger.info(results)\n    refresh_token =\"\"\n    for result in results:\n        logger.info(result)\n        refresh_token = result.get(\"refresh_token\")",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_athelte_training_details",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_athelte_training_details(athlete_id):\n    client = initiate_mango_connection()\n    db = client[\"strava\"]\n    collection = db[\"workout_details\"]\n    results = collection.find({\"athlete_id\":int(athlete_id)})\n    logger.info(results)\n    for result in results:\n        latest_workout_plan = result.get(\"workout_plan\")[0]\n        goal_summary = result.get(\"goal_summary\")\n    close_client(client)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "close_client",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def close_client(client):\n    \"\"\"Closes the connection to the MongoDB client and logs it.\"\"\"\n    logger.info(\"Closing connection to MongoDB\")\n    client.close()\ndef delete_all_data(client):\n    \"\"\"Deletes all data from the collection and logs the action.\"\"\"\n    db = client[\"database-name\"]\n    collection = db[\"collection-name\"]\n    logger.info(\"Deleting all data from collection\")\n    result = collection.delete_many({})",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "delete_all_data",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def delete_all_data(client):\n    \"\"\"Deletes all data from the collection and logs the action.\"\"\"\n    db = client[\"database-name\"]\n    collection = db[\"collection-name\"]\n    logger.info(\"Deleting all data from collection\")\n    result = collection.delete_many({})\n    logger.info(\"Deleted %d documents\", result.deleted_count)\ndef test_saving():\n    client = initiate_mango_connection()\n    # delete_all_data(client)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "test_saving",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def test_saving():\n    client = initiate_mango_connection()\n    # delete_all_data(client)\n    test_json = {\n    \"athlete_id\": \"64768690\",\n        \"refresh_token\": \"239efcb1a295abda6e7d930587d120817cb5997d\",\n        \"athlete_name\": \"Omkar Jadhav\"\n    }\n    message = save_athlete_data(client,test_json)\n    refresh_token=check_athlete_in_data(client,test_json[\"athlete_id\"])",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)  # Adjust logging level as needed\ndef initiate_mango_connection():\n    \"\"\"Connects to the MongoDB database and logs success or errors.\"\"\"\n    ca = certifi.where()  # Load the updated CA bundle\n    uri = os.environ.get(\"mango_url\")\n    logger.debug(\"Connecting to MongoDB with URI: %s\", uri)\n    try:\n        # Create a new client and connect to the server\n        client = MongoClient(uri, tlsCAFile=ca)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "give_weighttraining_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_weighttraining_summary(WeightTraining_activities):\n    total_strength_training_time = 0\n    total_sessions = 0\n    for activity in WeightTraining_activities:\n        total_strength_training_time += activity[\"moving_time\"]\n        total_sessions += 1\n    avg_strength_training_session = utils.convert_seconds_in_hhmmss(round(total_strength_training_time/total_sessions, 2))\n    total_strength_training_time = utils.convert_seconds_in_hhmmss(total_strength_training_time)\n    # overall_strength_training_summary_data =[[f\"{total_sessions}   |  {avg_strength_training_session}   |  {total_strength_training_time}\"],\n    # ]",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_yoga_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_yoga_summary(yoga_activities):\n    total_yoga_time = 0\n    total_sessions = 0\n    for activity in yoga_activities:\n        total_yoga_time += activity[\"elapsed_time\"]\n        total_sessions += 1\n    avg_yoga_session = utils.convert_seconds_in_hhmmss(round(total_yoga_time/total_sessions, 2))\n    total_yoga_time = utils.convert_seconds_in_hhmmss(total_yoga_time)\n    # overall_yoga_summary_data =[\n    #     [\"Total yoga sessions:\", f\"{total_sessions}\"],",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_swim_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_swim_summary(swim_activities):\n    total_swim_time = 0\n    total_swim_sessions = 0\n    for activity in swim_activities:\n        total_swim_time += activity[\"elapsed_time\"]\n        total_swim_sessions += 1\n    avg_swim_session = utils.convert_seconds_in_hhmmss(round(total_swim_time/total_swim_sessions, 2))\n    total_swim_time = utils.convert_seconds_in_hhmmss(total_swim_time)\n    total_swim_time = convert_seconds_in_hhmmss(total_swim_time)\n    # overall_swim_summary_data =[",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_ride_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_ride_summary(ride_activities):\n    total_ride_time = 0\n    total_ride_time_hhmmss = 0\n    total_ride_sessions = 0\n    total_ride_distance = 0\n    total_elevation_gain = 0\n    for activity in ride_activities:\n        total_ride_time += activity['moving_time']\n        total_ride_sessions += 1\n        total_ride_distance += activity['distance']",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_run_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_run_summary(run_activities):\n    tot_distance_ran_month = 0\n    avg_distance_per_run = 0\n    tot_elevation_gain = 0\n    avg_elevation_gain = 0\n    tot_trail_distance = 0\n    total_runs_month = 0\n    total_trail_runs_month = 0\n    total_road_runs_month = 0\n    tot_road_distance = 0",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_walk_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_walk_summary(walk_activities):\n    tot_distance_walked_month = 0\n    avg_distance_per_walk = 0\n    tot_elevation_gain = 0\n    avg_elevation_gain = 0\n    tot_moving_time = 0\n    avg_mov_speed = 0\n    tot_elapsed_time = 0\n    avg_elapsed_speed = 0\n    for activity in walk_activities:",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "get_access_token",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens\n    if refresh_token is not None:\n        # Retrieve the refresh_token for the athlete_id\n        logger.info('inside if refresh-token condition')\n        REFRESH_TOKEN = refresh_token",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "get_top_three_longest_runs",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def get_top_three_longest_runs(activities):\n    runs = []\n    for activity in activities:\n        if activity['type'] == 'Run':\n            distance_km = activity['distance'] / 1000  # Convert meters to kilometers\n            moving_time = activity['moving_time']\n            avg_pace_min_per_km = utils.calculate_pace_minKm(moving_time, distance_km * 1000)\n            elevation_gain = activity.get('total_elevation_gain', 0)  # Elevation in meters\n            runs.append({\n                \"distance\": round(distance_km, 2),",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "get_race_details",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def get_race_details(activities):\n    races = []\n    for activity in activities:\n        if activity.get('workout_type') == 1:  # Strava identifies races with workout_type = 1\n            distance_km = activity['distance'] / 1000  # Convert meters to kilometers\n            moving_time = activity['moving_time']\n            avg_pace_min_per_km = utils.calculate_pace_minKm(moving_time, distance_km * 1000)\n            elevation_gain = activity.get('total_elevation_gain', 0)  # Elevation in meters\n            races.append({\n                \"name\": activity.get('name', 'Unnamed Race'),",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "get_activities_for_period",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def get_activities_for_period(weeks, athlete_id, sport_type=None):\n    \"\"\"Get activities for a specific time period and sport type.\"\"\"\n    # Step 1: Retrieve Access Token\n    access_token = get_access_token(athlete_id)\n    logger.info('Access token retrieved')\n    # Step 2: Define API Endpoint and Parameters\n    BEFORE = int(time.time()) \n    AFTER = int(time.time()) - (weeks * 7 * 24 * 60 * 60)\n    activities_url = \"https://www.strava.com/api/v3/athlete/activities\"\n    headers = {'Authorization': f'Bearer {access_token}'}   ",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "get_month_wise_activities",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def get_month_wise_activities(all_activities, weeks, sport_type):\n    current_time = int(time.time())\n    week_seconds = 7 * 24 * 60 * 60\n    segmented_activities = []\n    for i in range(weeks // 4 + 1):  # Creates enough groups for 4+4+1 pattern\n        segmented_activities.append([])\n    for activity in all_activities:\n        activity_time = activity['start_date']\n        activity_timestamp = int(datetime.datetime.strptime(activity_time, '%Y-%m-%dT%H:%M:%SZ').timestamp())\n        week_index = (current_time - activity_timestamp) // week_seconds",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "get_latest_activities",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def get_latest_activities(inputs):\n    logging.info('Inside get_latest_activities')\n    latest_activity_id = inputs.get('activity_id')\n    athlete_id = inputs.get('athlete_id')\n    # Step 1: Retrieve Access Token\n    access_token = get_access_token(athlete_id)\n    logging.info('Access token retrieved')\n    # Step 2: Define API Endpoint and Parameters\n    BEFORE = int(time.time()) \n    AFTER = int(time.time()) - (28 * 24 * 60 * 60)  # Exactly 4 weeks",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "fetch_complete_activity_detail",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def fetch_complete_activity_detail(activty_id, headers):\n    \"\"\"Fetch complete activity details.\"\"\"\n    activity_url = f\"https://www.strava.com/api/v3/activities/{activty_id}\"\n    response = requests.get(activity_url, headers)\n    if response.status_code == 200:\n        return response.json()\n    return None",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)  # Adjust logging level as needed\n# Replace these with your Strava API credentials\nCLIENT_ID = os.environ.get('CLIENT_ID')\nCLIENT_SECRET =  os.environ.get('CLIENT_SECRET')\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "CLIENT_ID = os.environ.get('CLIENT_ID')\nCLIENT_SECRET =  os.environ.get('CLIENT_SECRET')\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens\n    if refresh_token is not None:",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "CLIENT_SECRET =  os.environ.get('CLIENT_SECRET')\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens\n    if refresh_token is not None:\n        # Retrieve the refresh_token for the athlete_id",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "get_access_token",
        "kind": 2,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "def get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens\n    if refresh_token is not None:\n        # Retrieve the refresh_token for the athlete_id\n        logger.info('inside if refresh-token condition')\n        REFRESH_TOKEN = refresh_token",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "get_latest_activities",
        "kind": 2,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "def get_latest_activities(inputs):\n    logging.info('Inside get_latest_activities')\n    latest_activity_id = inputs.get('activity_id')\n    athlete_id = inputs.get('athlete_id')\n    # Step 1: Retrieve Access Token\n    access_token = get_access_token(athlete_id)\n    logging.info('Access token retrieved')\n    # Step 2: Define API Endpoint and Parameters\n    BEFORE = int(time.time()) \n    AFTER = int(time.time()) - (28 * 24 * 60 * 60)  # Exactly 4 weeks",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "format_prompt_for_llm",
        "kind": 2,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "def format_prompt_for_llm(athlete_goal, athlete_baseline, past_3m_summarised, past_month_runs_details):\n    athlete_baseline['speed_mean']=utils.convert_speed_to_pace(athlete_baseline['speed_mean'])\n    athlete_baseline['speed_std']=utils.convert_speed_to_pace(athlete_baseline['speed_std'])\n    prompt =f\"\"\"\n    You are a professional running coach who provides the workout plans according to athlete goals, current conditions and recent runs. Today is {datetime.now().strftime(\"%B %d, %Y\")}  and the day is {datetime.today().strftime('%A')} Provide plan upto sunday.\n    The athlete's goal is - {athlete_goal}. \n    The athlete's baseline stats are as follows: {\", \".join(f\"{key}={value}\" for key, value in athlete_baseline.items() if key != \"speed_std\")}.\n    Athlete's past 3 months activity can be summarised as: {past_3m_summarised}\n    The athlete's past months workout history is: {past_month_runs_details} \n    First Mention an birds eye view of how the plan will look like to reach the goal. ",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "fetch_complete_activity_detail",
        "kind": 2,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "def fetch_complete_activity_detail(activty_id, headers):\n    \"\"\"Fetch complete activity details.\"\"\"\n    activity_url = f\"https://www.strava.com/api/v3/activities/{activty_id}\"\n    response = requests.get(activity_url, headers)\n    if response.status_code == 200:\n        return response.json()\n    return None",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)  # Adjust logging level as needed\n# Replace these with your Strava API credentials\nCLIENT_ID = os.environ.get('CLIENT_ID')\nCLIENT_SECRET =  os.environ.get('CLIENT_SECRET')\n# REFRESH_TOKEN = '239efcb1a295abda6e7d930587d120817cb5997d'\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "CLIENT_ID = os.environ.get('CLIENT_ID')\nCLIENT_SECRET =  os.environ.get('CLIENT_SECRET')\n# REFRESH_TOKEN = '239efcb1a295abda6e7d930587d120817cb5997d'\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "CLIENT_SECRET =  os.environ.get('CLIENT_SECRET')\n# REFRESH_TOKEN = '239efcb1a295abda6e7d930587d120817cb5997d'\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens\n    if refresh_token is not None:",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "uri",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "uri = \"mongodb+srv://omkarjadhav00:mango@strava-token.6r1ebob.mongodb.net/?ssl=true&ssl_cert_reqs=CERT_NONE&retryWrites=true&w=majority\"\n# Create a new client and connect to the server\nclient = MongoClient(uri)\n# Send a ping to confirm a successful connection\ntry:\n    client.admin.command('ping')\n    print(\"Pinged your deployment. You successfully connected to MongoDB!\")\nexcept Exception as e:\n    print(e)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "client = MongoClient(uri)\n# Send a ping to confirm a successful connection\ntry:\n    client.admin.command('ping')\n    print(\"Pinged your deployment. You successfully connected to MongoDB!\")\nexcept Exception as e:\n    print(e)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "parse_workout_plan",
        "kind": 2,
        "importPath": "test_plan",
        "description": "test_plan",
        "peekOfCode": "def parse_workout_plan(text):\n    # Extracting Dates\n    dates = re.search(r\"\\s*(\\d{2}/\\d{2}/\\d{4})\\s*-\\s*(\\d{2}/\\d{2}/\\d{4})\", text)\n    dates = dates.groups() if dates else None\n    # Extracting Workouts\n    workouts = {}\n    workout_pattern = r\"#### (\\w+)\\s*-([^#]+)\"\n    workout_matches = re.findall(workout_pattern, text)\n    for day, details in workout_matches:\n        workouts[day] = details.strip()",
        "detail": "test_plan",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "test_plan",
        "description": "test_plan",
        "peekOfCode": "url = \"https://localhost/generatePlan\"\n# form_data = {'goalType': 'specific', 'goal': '100Km ultra trail with 5000m elevation', 'targetDate': '2025-03-09', 'trainingDays': '5', 'fitnessLevel': 'intermediate', 'recentPerformance': '100Km ultra trail 3380D+ in 19:30, marathon in 3:45', 'strengthSessions': '4', 'timeCommitment': '1.5hr', 'injuries': '', 'preferences': 'Long runs and long trails on weekends only', 'specialConditions': '', 'otherInfo': '', 'athlete_id': '64768690'}\n# form_data = json.dumps(form_data)\n# response = requests.post(url, json=form_data)\n# # Print the response\n# if response.status_code == 200:\n#     print(\"Response from server:\")\n#     print(response.json())\n# else:\n#     print(f\"Error: {response.status_code}\")",
        "detail": "test_plan",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "test_plan",
        "description": "test_plan",
        "peekOfCode": "string1 = test_plan_data.next_week_plan\nstring4= test_plan_data.new_plan_3\nstring3 = test_plan_data.new_plan_2\nimport json\nimport re\nimport re\ndef parse_workout_plan(text):\n    # Extracting Dates\n    dates = re.search(r\"\\s*(\\d{2}/\\d{2}/\\d{4})\\s*-\\s*(\\d{2}/\\d{2}/\\d{4})\", text)\n    dates = dates.groups() if dates else None",
        "detail": "test_plan",
        "documentation": {}
    },
    {
        "label": "string3",
        "kind": 5,
        "importPath": "test_plan",
        "description": "test_plan",
        "peekOfCode": "string3 = test_plan_data.new_plan_2\nimport json\nimport re\nimport re\ndef parse_workout_plan(text):\n    # Extracting Dates\n    dates = re.search(r\"\\s*(\\d{2}/\\d{2}/\\d{4})\\s*-\\s*(\\d{2}/\\d{2}/\\d{4})\", text)\n    dates = dates.groups() if dates else None\n    # Extracting Workouts\n    workouts = {}",
        "detail": "test_plan",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "test_plan",
        "description": "test_plan",
        "peekOfCode": "string = test_plan_data.new_plan\n# parsed_plan1 = parse_workout_plan(string1)\nparsed_plan4 = parse_workout_plan(string4)\n# parsed_plan3 = parse_workout_plan(string3)\n# parse_plan = parse_workout_plan(string)\n# workouts = extract_daily_workouts(parse_plan[1])\n# print(parsed_plan3)\n# print(parsed_plan1)\n# print(parsed_plan4)",
        "detail": "test_plan",
        "documentation": {}
    },
    {
        "label": "parsed_plan4",
        "kind": 5,
        "importPath": "test_plan",
        "description": "test_plan",
        "peekOfCode": "parsed_plan4 = parse_workout_plan(string4)\n# parsed_plan3 = parse_workout_plan(string3)\n# parse_plan = parse_workout_plan(string)\n# workouts = extract_daily_workouts(parse_plan[1])\n# print(parsed_plan3)\n# print(parsed_plan1)\n# print(parsed_plan4)",
        "detail": "test_plan",
        "documentation": {}
    },
    {
        "label": "athlete_id",
        "kind": 5,
        "importPath": "test_plan_data",
        "description": "test_plan_data",
        "peekOfCode": "athlete_id = 64768690\npast_3m_summarised =\"\"\" **Summary of Athlete's Past 3 Months Running History**\nThe athlete has a diverse and extensive running history over the past 3 months, consisting of various types of runs, including long runs, tempo runs, easy runs, recovery runs, intervals, trail runs, and hill workouts.\n**Total Distance and Elevation Gain**\nThe total distance covered by the athlete over the past 3 months is approximately 734.14 km, with a total elevation gain of 10,341.2 meters.\n**Types of Runs and Frequency**\n1. **Long Runs**: 4 long runs, with distances ranging from 22.33 km to 30.33 km, and average paces between 05:25 min/km and 06:09 min/km.\n2. **Tempo Runs**: 5 tempo runs, with distances ranging from 1.74 km to 15.23 km, and average paces between 04:57 min/km and 05:54 min/km.\n3. **Easy Runs**: 11 easy runs, with distances ranging from 3.07 km to 11.03 km, and average paces between 06:00 min/km and 06:27 min/km.\n4. **Recovery Runs**: 13 recovery runs, with no specific distance or pace data available.",
        "detail": "test_plan_data",
        "documentation": {}
    },
    {
        "label": "past_month_run_details",
        "kind": 5,
        "importPath": "test_plan_data",
        "description": "test_plan_data",
        "peekOfCode": "past_month_run_details = \"\"\"\nprint(past_month_runs_details)\n1. Day 0: Trail Run\n14.40 km | ↗️1017.0m\n2. Day 2: Trail Run\n4.77 km | ↗️202.0m\n3. Day 2:Base Training of 8.10 km at 05:24 min/Km | ↗️12.0m\n4. Day 4: Recovery Run\n5. Day 5: Trail Run\n4.44 km | ↗️102.0m",
        "detail": "test_plan_data",
        "documentation": {}
    },
    {
        "label": "goal_summary",
        "kind": 5,
        "importPath": "test_plan_data",
        "description": "test_plan_data",
        "peekOfCode": "goal_summary = \"\"\"\nHere is a brief summary of the athlete's goals and current situation:\n**Goal:** Complete a 100Km ultra trail with 5000m elevation by March 9, 2025.\n**Current Fitness Level:** Intermediate\n**Available Training Time:** 1.5 hours/day, 5 days a week\n**Recent Performances:**\n* Completed a 100Km ultra trail with 3342m elevation in 19:27:15\n* Completed a marathon in 3:45\n* Recent long runs: 100.3km, 42.61km, and 41.86km with varying paces and elevations\n**Training Preferences:**",
        "detail": "test_plan_data",
        "documentation": {}
    },
    {
        "label": "dates",
        "kind": 5,
        "importPath": "test_plan_data",
        "description": "test_plan_data",
        "peekOfCode": "dates = \"20/01/2025 - 26/01/2025\"\ngoal_summary = \"\\nHere is a brief summary of the athlete's goals and current situation:\\n\\n**Goal:** Complete a 100Km ultra trail with 5000m elevation by March 9, 2025.\\n\\n**Current Fitness Level:** Intermediate\\n\\n**Available Training Time:** 1.5 hours/day, 5 days a week\\n\\n**Recent Performances:**\\n\\n* Completed a 100Km ultra trail with 3342m elevation in 19:27:15\\n* Completed a marathon in 3:45\\n* Recent long runs: 100.3km, 42.61km, and 41.86km with varying paces and elevations\\n\\n**Training Preferences:**\\n\\n* Long runs and trails only on weekends\\n* Can commit to 4 strength sessions per week\\n\\nThis information will be used to create a personalized training plan to help the athlete achieve their goal.\"\nnew_plan=\"Dates: 03/02/2025 - 09/02/2025\\n\\nOverview of the previous workouts: The athlete completed a hill workout, two trail runs, and a base training session in the past week, with a total distance of 38.3 km and elevation gain of 1256m. Although the athlete did not follow the prescribed workout plan completely, they still managed to get some quality training done. I applaud the athlete for their efforts, but I expect them to be more consistent with the plan in the upcoming week.\\n\\nWorkout Plan:\\nMonday (1.5 hours)\\n- Warm-up: \\n▪ Easy running: 10-15 minutes\\n- Strength Training: \\n▪ Squats: 3 sets of 12 reps\\n▪ Lunges: 3 sets of 12 reps (per leg)\\n▪ Calf raises: 3 sets of 18 reps\\n- Cool-down: \\n▪ Stretching and foam rolling: 10-15 minutes\\nTuesday (1.5 hours)\\n- Warm-up: \\n▪ Easy running: 10-15 minutes\\n- Tempo Run: \\n▪ Moderate pace: 35 minutes at approximately 6:00-6:30 min/km\\n- Cool-down: \\n▪ Easy running: 10-15 minutes\\n- Mobility Workout: \\n▪ Leg swings: 3 sets of 12 reps (front and back)\\n▪ Hip circles: 3 sets of 12 reps\\nWednesday (1.5 hours)\\n- Warm-up: \\n▪ Easy running: 10-15 minutes\\n- Hill Repeats: \\n▪ High intensity: 7-9 x 400m hill repeats at approximately 4:00-4:30 min/km\\n- Cool-down: \\n▪ Easy running: 10-15 minutes\\n- Strength Training: \\n▪ Deadlifts: 3 sets of 12 reps\\n▪ Step-ups: 3 sets of 12 reps (per leg)\\nThursday (1.5 hours)\\n- Warm-up: \\n▪ Easy running: 10-15 minutes\\n- Easy Run: \\n▪ Easy pace: 50 minutes at approximately 7:00-7:30 min/km\\n- Cool-down: \\n▪ Stretching and foam rolling: 10-15 minutes\\n- Mobility Workout: \\n▪ Hip flexor stretches: 3 sets of 12 reps\\n▪ Quad stretches: 3 sets of 12 reps\\nFriday (1.5 hours)\\n- Warm-up: \\n▪ Easy running: 10-15 minutes\\n- Long Run: \\n▪ Moderate pace: 70 minutes at approximately 6:30-7:00 min/km\\n- Cool-down: \\n▪ Easy running: 10-15 minutes\\n- Strength Training: \\n▪ Leg press: 3 sets of 12 reps\\n▪ Calf raises: 3 sets of 18 reps\\nSaturday (Rest Day)\\nSunday (2.5 hours)\\n- Warm-up: \\n▪ Easy running: 10-15 minutes\\n- Long Run: \\n▪ Moderate pace: 2.5 hours at approximately 6:30-7:00 min/km with 1200m elevation gain\\n- Cool-down: \\n▪ Easy running: 10-15 minutes\\n\\nNotes:\\n- The athlete should focus on proper nutrition and hydration to support their training.\\n- It is essential to get 7-9 hours of sleep each night to aid in recovery.\\n- The athlete should incorporate rest and recovery techniques such as foam rolling, stretching, and self-myofascial release to aid in recovery.\\n- I expect the athlete to follow the prescribed workout plan more consistently in the upcoming week.\\n- The athlete should listen to their body and adjust the intensity and volume of training based on how they feel.\"\npast_week_activity_dtls = \"1. Day 0: Hill Workout of 11.03 km at 05:43 min/Km | ↗️25.0m\\n2. Day 2: Trail Run\\n14.40 km | ↗️1017.0m\\n3. Day 5: Trail Run\\n4.77 km | ↗️202.0m\\n4. Day 5:Base Training of 8.10 km at 05:24 min/Km | ↗️12.0m\"\nnew_plan_2 = \"### Dates: 03/02/2025 - 09/02/2025\\n### Overview of the previous workouts: \\nThe athlete has completed some workouts in the past week, including a hill workout, two trail runs, and a base training session. The details of these workouts are as follows:\\n* Day 0: Hill Workout of 11.03 km at 05:43 min/Km with 25.0m elevation gain\\n* Day 2: Trail Run of 14.40 km with 1017.0m elevation gain\\n* Day 5: Trail Run of 4.77 km with 202.0m elevation gain\\n* Day 5: Base Training of 8.10 km at 05:24 min/Km with 12.0m elevation gain\\nHowever, the athlete has missed some workouts from the provided plan, including strength training sessions, mobility workouts, and easy runs. It is essential to stay on track with the plan to achieve the goal of completing a 100Km ultra trail with 5000m elevation by March 9, 2025.\\n\\n### Workout Plan:\\n#### Monday \\n- Warm-up: 10-15 minutes of easy running\\n- Strength Training:\\n  * Squats: 3 sets of 12 reps\\n  * Lunges: 3 sets of 12 reps (per leg)\\n  * Calf raises: 3 sets of 18 reps\\n  * Core exercises: 3 sets of 12 reps (plank, Russian twists, etc.)\\n- Cool-down: 10-15 minutes of stretching and foam rolling\\n\\n#### Tuesday \\n- Warm-up: 10-15 minutes of easy running\\n- Tempo Run: 35 minutes at a moderate pace (approx. 6:00-6:30 min/km)\\n- Cool-down: 10-15 minutes of easy running\\n- Mobility Workout:\\n  * Leg swings: 3 sets of 12 reps (front and back)\\n  * Hip circles: 3 sets of 12 reps\\n  * Calf stretches: 3 sets of 12 reps\\n\\n#### Wednesday \\n- Warm-up: 10-15 minutes of easy running\\n- Hill Repeats: 7-9 x 400m hill repeats at a high intensity (approx. 4:00-4:30 min/km)\\n- Cool-down: 10-15 minutes of easy running\\n- Strength Training:\\n  * Deadlifts: 3 sets of 12 reps\\n  * Step-ups: 3 sets of 12 reps (per leg)\\n  * Calf raises: 3 sets of 18 reps\\n\\n#### Thursday \\n- Warm-up: 10-15 minutes of easy running\\n- Easy Run: 50 minutes at an easy pace (approx. 7:00-7:30 min/km)\\n- Cool-down: 10-15 minutes of stretching and foam rolling\\n- Mobility Workout:\\n  * Hip flexor stretches: 3 sets of 12 reps\\n  * Quad stretches: 3 sets of 12 reps\\n  * Calf stretches: 3 sets of 12 reps\\n\\n#### Friday \\n- Warm-up: 10-15 minutes of easy running\\n- Long Run: 70 minutes at a moderate pace (approx. 6:30-7:00 min/km)\\n- Cool-down: 10-15 minutes of easy running\\n- Strength Training:\\n  * Leg press: 3 sets of 12 reps\\n  * Calf raises: 3 sets of 18 reps\\n  * Core exercises: 3 sets of 12 reps (plank, Russian twists, etc.)\\n\\n#### Saturday \\n- Rest Day\\n\\n#### Sunday \\n- Warm-up: 10-15 minutes of easy running\\n- Long Run: 2.5 hours at a moderate pace (approx. 6:30-7:00 min/km) with 1200m elevation gain\\n- Cool-down: 10-15 minutes of easy running\\n\\n### Notes:\\n* The athlete should listen to their body and adjust the intensity and volume of training based on how they feel.\\n* The athlete should also pay attention to their nutrition and hydration to ensure they are fueling their body for optimal performance.\\n* The athlete should aim to get 7-9 hours of sleep each night to aid in recovery.\\n* The athlete should also incorporate rest and recovery techniques such as foam rolling, stretching, and self-myofascial release to aid in recovery.\\n* It is essential to stay on track with the plan and complete all the workouts as scheduled to achieve the goal of completing a 100Km ultra trail with 5000m elevation by March 9, 2025.\"\nnew_plan_3 =\"Dates:29/01/2025 - 04/02/2025\\n### Bird's eye view: \\nThe workout plan for the next week will focus on building the athlete's endurance, strength, and mobility to reach the goal of completing a 100km trail run by 28/06/2025. The plan will include a mix of easy runs, tempo workouts, hill repeats, and long runs to improve cardiovascular fitness and running efficiency. Strength training and mobility workouts will be added to enhance muscular endurance, flexibility, and injury prevention.\\n\\n### Workout Plan:\\n#### Monday \\n- Easy Run: 10km at 06:30 min/km pace\\n- Strength Training: Lower Body Workout (Squats, Lunges, Calf Raises)\\n  * Warm-up: 10-15 minutes of light cardio and dynamic stretching\\n  * Squats: 3 sets of 10 reps\\n  * Lunges: 3 sets of 10 reps (per leg)\\n  * Calf Raises: 3 sets of 15 reps\\n  * Cool-down: 10-15 minutes of static stretching\\n\\n#### Tuesday \\n- Tempo Workout: 6km at 05:30 min/km pace\\n- Mobility Workout: Foam Rolling and Self-Myofascial Release (Focus on IT Band, Calves, and Quads)\\n  * 10-15 minutes of foam rolling and self-myofascial release\\n\\n#### Wednesday \\n- Hill Repeats: 8km (4km uphill at 07:00 min/km pace, 4km downhill at 05:00 min/km pace)\\n- Strength Training: Core Workout (Planks, Russian Twists, Leg Raises)\\n  * Warm-up: 10-15 minutes of light cardio and dynamic stretching\\n  * Planks: 3 sets of 30-second hold\\n  * Russian Twists: 3 sets of 15 reps\\n  * Leg Raises: 3 sets of 15 reps\\n  * Cool-down: 10-15 minutes of static stretching\\n\\n#### Thursday \\n- Easy Run: 10km at 06:30 min/km pace\\n- Mobility Workout: Yoga or Active Recovery (Focus on Hip Flexors, Hamstrings, and Lower Back)\\n  * 30-45 minutes of yoga or active recovery\\n\\n#### Friday \\n- Long Run: 25km at 06:15 min/km pace\\n- Strength Training: Upper Body Workout (Push-ups, Pull-ups, Dumbbell Rows)\\n  * Warm-up: 10-15 minutes of light cardio and dynamic stretching\\n  * Push-ups: 3 sets of 10 reps\\n  * Pull-ups: 3 sets of as many reps as possible\\n  * Dumbbell Rows: 3 sets of 10 reps (per arm)\\n  * Cool-down: 10-15 minutes of static stretching\\n\\n#### Saturday \\n- Rest Day or Active Recovery (30-45 minutes of easy cycling, swimming, or walking)\\n\\n#### Sunday \\n- Rest Day or Active Recovery (30-45 minutes of easy cycling, swimming, or walking)\\n\\n### Notes:\\n* Make sure to warm up and cool down properly before and after each workout\\n* Incorporate proper nutrition and hydration to support training and recovery\\n* Listen to your body and adjust the plan as needed to avoid injury or burnout\\n* Get at least 7-9 hours of sleep each night to aid in recovery and adaptation\\n* Incorporate visualization techniques and positive self-talk to enhance mental preparation and resilience\\n* Review and adjust the plan with your coach or trainer on a regular basis to ensure progress towards your goal.\"",
        "detail": "test_plan_data",
        "documentation": {}
    },
    {
        "label": "goal_summary",
        "kind": 5,
        "importPath": "test_plan_data",
        "description": "test_plan_data",
        "peekOfCode": "goal_summary = \"\\nHere is a brief summary of the athlete's goals and current situation:\\n\\n**Goal:** Complete a 100Km ultra trail with 5000m elevation by March 9, 2025.\\n\\n**Current Fitness Level:** Intermediate\\n\\n**Available Training Time:** 1.5 hours/day, 5 days a week\\n\\n**Recent Performances:**\\n\\n* Completed a 100Km ultra trail with 3342m elevation in 19:27:15\\n* Completed a marathon in 3:45\\n* Recent long runs: 100.3km, 42.61km, and 41.86km with varying paces and elevations\\n\\n**Training Preferences:**\\n\\n* Long runs and trails only on weekends\\n* Can commit to 4 strength sessions per week\\n\\nThis information will be used to create a personalized training plan to help the athlete achieve their goal.\"\nnew_plan=\"Dates: 03/02/2025 - 09/02/2025\\n\\nOverview of the previous workouts: The athlete completed a hill workout, two trail runs, and a base training session in the past week, with a total distance of 38.3 km and elevation gain of 1256m. Although the athlete did not follow the prescribed workout plan completely, they still managed to get some quality training done. I applaud the athlete for their efforts, but I expect them to be more consistent with the plan in the upcoming week.\\n\\nWorkout Plan:\\nMonday (1.5 hours)\\n- Warm-up: \\n▪ Easy running: 10-15 minutes\\n- Strength Training: \\n▪ Squats: 3 sets of 12 reps\\n▪ Lunges: 3 sets of 12 reps (per leg)\\n▪ Calf raises: 3 sets of 18 reps\\n- Cool-down: \\n▪ Stretching and foam rolling: 10-15 minutes\\nTuesday (1.5 hours)\\n- Warm-up: \\n▪ Easy running: 10-15 minutes\\n- Tempo Run: \\n▪ Moderate pace: 35 minutes at approximately 6:00-6:30 min/km\\n- Cool-down: \\n▪ Easy running: 10-15 minutes\\n- Mobility Workout: \\n▪ Leg swings: 3 sets of 12 reps (front and back)\\n▪ Hip circles: 3 sets of 12 reps\\nWednesday (1.5 hours)\\n- Warm-up: \\n▪ Easy running: 10-15 minutes\\n- Hill Repeats: \\n▪ High intensity: 7-9 x 400m hill repeats at approximately 4:00-4:30 min/km\\n- Cool-down: \\n▪ Easy running: 10-15 minutes\\n- Strength Training: \\n▪ Deadlifts: 3 sets of 12 reps\\n▪ Step-ups: 3 sets of 12 reps (per leg)\\nThursday (1.5 hours)\\n- Warm-up: \\n▪ Easy running: 10-15 minutes\\n- Easy Run: \\n▪ Easy pace: 50 minutes at approximately 7:00-7:30 min/km\\n- Cool-down: \\n▪ Stretching and foam rolling: 10-15 minutes\\n- Mobility Workout: \\n▪ Hip flexor stretches: 3 sets of 12 reps\\n▪ Quad stretches: 3 sets of 12 reps\\nFriday (1.5 hours)\\n- Warm-up: \\n▪ Easy running: 10-15 minutes\\n- Long Run: \\n▪ Moderate pace: 70 minutes at approximately 6:30-7:00 min/km\\n- Cool-down: \\n▪ Easy running: 10-15 minutes\\n- Strength Training: \\n▪ Leg press: 3 sets of 12 reps\\n▪ Calf raises: 3 sets of 18 reps\\nSaturday (Rest Day)\\nSunday (2.5 hours)\\n- Warm-up: \\n▪ Easy running: 10-15 minutes\\n- Long Run: \\n▪ Moderate pace: 2.5 hours at approximately 6:30-7:00 min/km with 1200m elevation gain\\n- Cool-down: \\n▪ Easy running: 10-15 minutes\\n\\nNotes:\\n- The athlete should focus on proper nutrition and hydration to support their training.\\n- It is essential to get 7-9 hours of sleep each night to aid in recovery.\\n- The athlete should incorporate rest and recovery techniques such as foam rolling, stretching, and self-myofascial release to aid in recovery.\\n- I expect the athlete to follow the prescribed workout plan more consistently in the upcoming week.\\n- The athlete should listen to their body and adjust the intensity and volume of training based on how they feel.\"\npast_week_activity_dtls = \"1. Day 0: Hill Workout of 11.03 km at 05:43 min/Km | ↗️25.0m\\n2. Day 2: Trail Run\\n14.40 km | ↗️1017.0m\\n3. Day 5: Trail Run\\n4.77 km | ↗️202.0m\\n4. Day 5:Base Training of 8.10 km at 05:24 min/Km | ↗️12.0m\"\nnew_plan_2 = \"### Dates: 03/02/2025 - 09/02/2025\\n### Overview of the previous workouts: \\nThe athlete has completed some workouts in the past week, including a hill workout, two trail runs, and a base training session. The details of these workouts are as follows:\\n* Day 0: Hill Workout of 11.03 km at 05:43 min/Km with 25.0m elevation gain\\n* Day 2: Trail Run of 14.40 km with 1017.0m elevation gain\\n* Day 5: Trail Run of 4.77 km with 202.0m elevation gain\\n* Day 5: Base Training of 8.10 km at 05:24 min/Km with 12.0m elevation gain\\nHowever, the athlete has missed some workouts from the provided plan, including strength training sessions, mobility workouts, and easy runs. It is essential to stay on track with the plan to achieve the goal of completing a 100Km ultra trail with 5000m elevation by March 9, 2025.\\n\\n### Workout Plan:\\n#### Monday \\n- Warm-up: 10-15 minutes of easy running\\n- Strength Training:\\n  * Squats: 3 sets of 12 reps\\n  * Lunges: 3 sets of 12 reps (per leg)\\n  * Calf raises: 3 sets of 18 reps\\n  * Core exercises: 3 sets of 12 reps (plank, Russian twists, etc.)\\n- Cool-down: 10-15 minutes of stretching and foam rolling\\n\\n#### Tuesday \\n- Warm-up: 10-15 minutes of easy running\\n- Tempo Run: 35 minutes at a moderate pace (approx. 6:00-6:30 min/km)\\n- Cool-down: 10-15 minutes of easy running\\n- Mobility Workout:\\n  * Leg swings: 3 sets of 12 reps (front and back)\\n  * Hip circles: 3 sets of 12 reps\\n  * Calf stretches: 3 sets of 12 reps\\n\\n#### Wednesday \\n- Warm-up: 10-15 minutes of easy running\\n- Hill Repeats: 7-9 x 400m hill repeats at a high intensity (approx. 4:00-4:30 min/km)\\n- Cool-down: 10-15 minutes of easy running\\n- Strength Training:\\n  * Deadlifts: 3 sets of 12 reps\\n  * Step-ups: 3 sets of 12 reps (per leg)\\n  * Calf raises: 3 sets of 18 reps\\n\\n#### Thursday \\n- Warm-up: 10-15 minutes of easy running\\n- Easy Run: 50 minutes at an easy pace (approx. 7:00-7:30 min/km)\\n- Cool-down: 10-15 minutes of stretching and foam rolling\\n- Mobility Workout:\\n  * Hip flexor stretches: 3 sets of 12 reps\\n  * Quad stretches: 3 sets of 12 reps\\n  * Calf stretches: 3 sets of 12 reps\\n\\n#### Friday \\n- Warm-up: 10-15 minutes of easy running\\n- Long Run: 70 minutes at a moderate pace (approx. 6:30-7:00 min/km)\\n- Cool-down: 10-15 minutes of easy running\\n- Strength Training:\\n  * Leg press: 3 sets of 12 reps\\n  * Calf raises: 3 sets of 18 reps\\n  * Core exercises: 3 sets of 12 reps (plank, Russian twists, etc.)\\n\\n#### Saturday \\n- Rest Day\\n\\n#### Sunday \\n- Warm-up: 10-15 minutes of easy running\\n- Long Run: 2.5 hours at a moderate pace (approx. 6:30-7:00 min/km) with 1200m elevation gain\\n- Cool-down: 10-15 minutes of easy running\\n\\n### Notes:\\n* The athlete should listen to their body and adjust the intensity and volume of training based on how they feel.\\n* The athlete should also pay attention to their nutrition and hydration to ensure they are fueling their body for optimal performance.\\n* The athlete should aim to get 7-9 hours of sleep each night to aid in recovery.\\n* The athlete should also incorporate rest and recovery techniques such as foam rolling, stretching, and self-myofascial release to aid in recovery.\\n* It is essential to stay on track with the plan and complete all the workouts as scheduled to achieve the goal of completing a 100Km ultra trail with 5000m elevation by March 9, 2025.\"\nnew_plan_3 =\"Dates:29/01/2025 - 04/02/2025\\n### Bird's eye view: \\nThe workout plan for the next week will focus on building the athlete's endurance, strength, and mobility to reach the goal of completing a 100km trail run by 28/06/2025. The plan will include a mix of easy runs, tempo workouts, hill repeats, and long runs to improve cardiovascular fitness and running efficiency. Strength training and mobility workouts will be added to enhance muscular endurance, flexibility, and injury prevention.\\n\\n### Workout Plan:\\n#### Monday \\n- Easy Run: 10km at 06:30 min/km pace\\n- Strength Training: Lower Body Workout (Squats, Lunges, Calf Raises)\\n  * Warm-up: 10-15 minutes of light cardio and dynamic stretching\\n  * Squats: 3 sets of 10 reps\\n  * Lunges: 3 sets of 10 reps (per leg)\\n  * Calf Raises: 3 sets of 15 reps\\n  * Cool-down: 10-15 minutes of static stretching\\n\\n#### Tuesday \\n- Tempo Workout: 6km at 05:30 min/km pace\\n- Mobility Workout: Foam Rolling and Self-Myofascial Release (Focus on IT Band, Calves, and Quads)\\n  * 10-15 minutes of foam rolling and self-myofascial release\\n\\n#### Wednesday \\n- Hill Repeats: 8km (4km uphill at 07:00 min/km pace, 4km downhill at 05:00 min/km pace)\\n- Strength Training: Core Workout (Planks, Russian Twists, Leg Raises)\\n  * Warm-up: 10-15 minutes of light cardio and dynamic stretching\\n  * Planks: 3 sets of 30-second hold\\n  * Russian Twists: 3 sets of 15 reps\\n  * Leg Raises: 3 sets of 15 reps\\n  * Cool-down: 10-15 minutes of static stretching\\n\\n#### Thursday \\n- Easy Run: 10km at 06:30 min/km pace\\n- Mobility Workout: Yoga or Active Recovery (Focus on Hip Flexors, Hamstrings, and Lower Back)\\n  * 30-45 minutes of yoga or active recovery\\n\\n#### Friday \\n- Long Run: 25km at 06:15 min/km pace\\n- Strength Training: Upper Body Workout (Push-ups, Pull-ups, Dumbbell Rows)\\n  * Warm-up: 10-15 minutes of light cardio and dynamic stretching\\n  * Push-ups: 3 sets of 10 reps\\n  * Pull-ups: 3 sets of as many reps as possible\\n  * Dumbbell Rows: 3 sets of 10 reps (per arm)\\n  * Cool-down: 10-15 minutes of static stretching\\n\\n#### Saturday \\n- Rest Day or Active Recovery (30-45 minutes of easy cycling, swimming, or walking)\\n\\n#### Sunday \\n- Rest Day or Active Recovery (30-45 minutes of easy cycling, swimming, or walking)\\n\\n### Notes:\\n* Make sure to warm up and cool down properly before and after each workout\\n* Incorporate proper nutrition and hydration to support training and recovery\\n* Listen to your body and adjust the plan as needed to avoid injury or burnout\\n* Get at least 7-9 hours of sleep each night to aid in recovery and adaptation\\n* Incorporate visualization techniques and positive self-talk to enhance mental preparation and resilience\\n* Review and adjust the plan with your coach or trainer on a regular basis to ensure progress towards your goal.\"",
        "detail": "test_plan_data",
        "documentation": {}
    },
    {
        "label": "past_week_activity_dtls",
        "kind": 5,
        "importPath": "test_plan_data",
        "description": "test_plan_data",
        "peekOfCode": "past_week_activity_dtls = \"1. Day 0: Hill Workout of 11.03 km at 05:43 min/Km | ↗️25.0m\\n2. Day 2: Trail Run\\n14.40 km | ↗️1017.0m\\n3. Day 5: Trail Run\\n4.77 km | ↗️202.0m\\n4. Day 5:Base Training of 8.10 km at 05:24 min/Km | ↗️12.0m\"\nnew_plan_2 = \"### Dates: 03/02/2025 - 09/02/2025\\n### Overview of the previous workouts: \\nThe athlete has completed some workouts in the past week, including a hill workout, two trail runs, and a base training session. The details of these workouts are as follows:\\n* Day 0: Hill Workout of 11.03 km at 05:43 min/Km with 25.0m elevation gain\\n* Day 2: Trail Run of 14.40 km with 1017.0m elevation gain\\n* Day 5: Trail Run of 4.77 km with 202.0m elevation gain\\n* Day 5: Base Training of 8.10 km at 05:24 min/Km with 12.0m elevation gain\\nHowever, the athlete has missed some workouts from the provided plan, including strength training sessions, mobility workouts, and easy runs. It is essential to stay on track with the plan to achieve the goal of completing a 100Km ultra trail with 5000m elevation by March 9, 2025.\\n\\n### Workout Plan:\\n#### Monday \\n- Warm-up: 10-15 minutes of easy running\\n- Strength Training:\\n  * Squats: 3 sets of 12 reps\\n  * Lunges: 3 sets of 12 reps (per leg)\\n  * Calf raises: 3 sets of 18 reps\\n  * Core exercises: 3 sets of 12 reps (plank, Russian twists, etc.)\\n- Cool-down: 10-15 minutes of stretching and foam rolling\\n\\n#### Tuesday \\n- Warm-up: 10-15 minutes of easy running\\n- Tempo Run: 35 minutes at a moderate pace (approx. 6:00-6:30 min/km)\\n- Cool-down: 10-15 minutes of easy running\\n- Mobility Workout:\\n  * Leg swings: 3 sets of 12 reps (front and back)\\n  * Hip circles: 3 sets of 12 reps\\n  * Calf stretches: 3 sets of 12 reps\\n\\n#### Wednesday \\n- Warm-up: 10-15 minutes of easy running\\n- Hill Repeats: 7-9 x 400m hill repeats at a high intensity (approx. 4:00-4:30 min/km)\\n- Cool-down: 10-15 minutes of easy running\\n- Strength Training:\\n  * Deadlifts: 3 sets of 12 reps\\n  * Step-ups: 3 sets of 12 reps (per leg)\\n  * Calf raises: 3 sets of 18 reps\\n\\n#### Thursday \\n- Warm-up: 10-15 minutes of easy running\\n- Easy Run: 50 minutes at an easy pace (approx. 7:00-7:30 min/km)\\n- Cool-down: 10-15 minutes of stretching and foam rolling\\n- Mobility Workout:\\n  * Hip flexor stretches: 3 sets of 12 reps\\n  * Quad stretches: 3 sets of 12 reps\\n  * Calf stretches: 3 sets of 12 reps\\n\\n#### Friday \\n- Warm-up: 10-15 minutes of easy running\\n- Long Run: 70 minutes at a moderate pace (approx. 6:30-7:00 min/km)\\n- Cool-down: 10-15 minutes of easy running\\n- Strength Training:\\n  * Leg press: 3 sets of 12 reps\\n  * Calf raises: 3 sets of 18 reps\\n  * Core exercises: 3 sets of 12 reps (plank, Russian twists, etc.)\\n\\n#### Saturday \\n- Rest Day\\n\\n#### Sunday \\n- Warm-up: 10-15 minutes of easy running\\n- Long Run: 2.5 hours at a moderate pace (approx. 6:30-7:00 min/km) with 1200m elevation gain\\n- Cool-down: 10-15 minutes of easy running\\n\\n### Notes:\\n* The athlete should listen to their body and adjust the intensity and volume of training based on how they feel.\\n* The athlete should also pay attention to their nutrition and hydration to ensure they are fueling their body for optimal performance.\\n* The athlete should aim to get 7-9 hours of sleep each night to aid in recovery.\\n* The athlete should also incorporate rest and recovery techniques such as foam rolling, stretching, and self-myofascial release to aid in recovery.\\n* It is essential to stay on track with the plan and complete all the workouts as scheduled to achieve the goal of completing a 100Km ultra trail with 5000m elevation by March 9, 2025.\"\nnew_plan_3 =\"Dates:29/01/2025 - 04/02/2025\\n### Bird's eye view: \\nThe workout plan for the next week will focus on building the athlete's endurance, strength, and mobility to reach the goal of completing a 100km trail run by 28/06/2025. The plan will include a mix of easy runs, tempo workouts, hill repeats, and long runs to improve cardiovascular fitness and running efficiency. Strength training and mobility workouts will be added to enhance muscular endurance, flexibility, and injury prevention.\\n\\n### Workout Plan:\\n#### Monday \\n- Easy Run: 10km at 06:30 min/km pace\\n- Strength Training: Lower Body Workout (Squats, Lunges, Calf Raises)\\n  * Warm-up: 10-15 minutes of light cardio and dynamic stretching\\n  * Squats: 3 sets of 10 reps\\n  * Lunges: 3 sets of 10 reps (per leg)\\n  * Calf Raises: 3 sets of 15 reps\\n  * Cool-down: 10-15 minutes of static stretching\\n\\n#### Tuesday \\n- Tempo Workout: 6km at 05:30 min/km pace\\n- Mobility Workout: Foam Rolling and Self-Myofascial Release (Focus on IT Band, Calves, and Quads)\\n  * 10-15 minutes of foam rolling and self-myofascial release\\n\\n#### Wednesday \\n- Hill Repeats: 8km (4km uphill at 07:00 min/km pace, 4km downhill at 05:00 min/km pace)\\n- Strength Training: Core Workout (Planks, Russian Twists, Leg Raises)\\n  * Warm-up: 10-15 minutes of light cardio and dynamic stretching\\n  * Planks: 3 sets of 30-second hold\\n  * Russian Twists: 3 sets of 15 reps\\n  * Leg Raises: 3 sets of 15 reps\\n  * Cool-down: 10-15 minutes of static stretching\\n\\n#### Thursday \\n- Easy Run: 10km at 06:30 min/km pace\\n- Mobility Workout: Yoga or Active Recovery (Focus on Hip Flexors, Hamstrings, and Lower Back)\\n  * 30-45 minutes of yoga or active recovery\\n\\n#### Friday \\n- Long Run: 25km at 06:15 min/km pace\\n- Strength Training: Upper Body Workout (Push-ups, Pull-ups, Dumbbell Rows)\\n  * Warm-up: 10-15 minutes of light cardio and dynamic stretching\\n  * Push-ups: 3 sets of 10 reps\\n  * Pull-ups: 3 sets of as many reps as possible\\n  * Dumbbell Rows: 3 sets of 10 reps (per arm)\\n  * Cool-down: 10-15 minutes of static stretching\\n\\n#### Saturday \\n- Rest Day or Active Recovery (30-45 minutes of easy cycling, swimming, or walking)\\n\\n#### Sunday \\n- Rest Day or Active Recovery (30-45 minutes of easy cycling, swimming, or walking)\\n\\n### Notes:\\n* Make sure to warm up and cool down properly before and after each workout\\n* Incorporate proper nutrition and hydration to support training and recovery\\n* Listen to your body and adjust the plan as needed to avoid injury or burnout\\n* Get at least 7-9 hours of sleep each night to aid in recovery and adaptation\\n* Incorporate visualization techniques and positive self-talk to enhance mental preparation and resilience\\n* Review and adjust the plan with your coach or trainer on a regular basis to ensure progress towards your goal.\"",
        "detail": "test_plan_data",
        "documentation": {}
    },
    {
        "label": "new_plan_2",
        "kind": 5,
        "importPath": "test_plan_data",
        "description": "test_plan_data",
        "peekOfCode": "new_plan_2 = \"### Dates: 03/02/2025 - 09/02/2025\\n### Overview of the previous workouts: \\nThe athlete has completed some workouts in the past week, including a hill workout, two trail runs, and a base training session. The details of these workouts are as follows:\\n* Day 0: Hill Workout of 11.03 km at 05:43 min/Km with 25.0m elevation gain\\n* Day 2: Trail Run of 14.40 km with 1017.0m elevation gain\\n* Day 5: Trail Run of 4.77 km with 202.0m elevation gain\\n* Day 5: Base Training of 8.10 km at 05:24 min/Km with 12.0m elevation gain\\nHowever, the athlete has missed some workouts from the provided plan, including strength training sessions, mobility workouts, and easy runs. It is essential to stay on track with the plan to achieve the goal of completing a 100Km ultra trail with 5000m elevation by March 9, 2025.\\n\\n### Workout Plan:\\n#### Monday \\n- Warm-up: 10-15 minutes of easy running\\n- Strength Training:\\n  * Squats: 3 sets of 12 reps\\n  * Lunges: 3 sets of 12 reps (per leg)\\n  * Calf raises: 3 sets of 18 reps\\n  * Core exercises: 3 sets of 12 reps (plank, Russian twists, etc.)\\n- Cool-down: 10-15 minutes of stretching and foam rolling\\n\\n#### Tuesday \\n- Warm-up: 10-15 minutes of easy running\\n- Tempo Run: 35 minutes at a moderate pace (approx. 6:00-6:30 min/km)\\n- Cool-down: 10-15 minutes of easy running\\n- Mobility Workout:\\n  * Leg swings: 3 sets of 12 reps (front and back)\\n  * Hip circles: 3 sets of 12 reps\\n  * Calf stretches: 3 sets of 12 reps\\n\\n#### Wednesday \\n- Warm-up: 10-15 minutes of easy running\\n- Hill Repeats: 7-9 x 400m hill repeats at a high intensity (approx. 4:00-4:30 min/km)\\n- Cool-down: 10-15 minutes of easy running\\n- Strength Training:\\n  * Deadlifts: 3 sets of 12 reps\\n  * Step-ups: 3 sets of 12 reps (per leg)\\n  * Calf raises: 3 sets of 18 reps\\n\\n#### Thursday \\n- Warm-up: 10-15 minutes of easy running\\n- Easy Run: 50 minutes at an easy pace (approx. 7:00-7:30 min/km)\\n- Cool-down: 10-15 minutes of stretching and foam rolling\\n- Mobility Workout:\\n  * Hip flexor stretches: 3 sets of 12 reps\\n  * Quad stretches: 3 sets of 12 reps\\n  * Calf stretches: 3 sets of 12 reps\\n\\n#### Friday \\n- Warm-up: 10-15 minutes of easy running\\n- Long Run: 70 minutes at a moderate pace (approx. 6:30-7:00 min/km)\\n- Cool-down: 10-15 minutes of easy running\\n- Strength Training:\\n  * Leg press: 3 sets of 12 reps\\n  * Calf raises: 3 sets of 18 reps\\n  * Core exercises: 3 sets of 12 reps (plank, Russian twists, etc.)\\n\\n#### Saturday \\n- Rest Day\\n\\n#### Sunday \\n- Warm-up: 10-15 minutes of easy running\\n- Long Run: 2.5 hours at a moderate pace (approx. 6:30-7:00 min/km) with 1200m elevation gain\\n- Cool-down: 10-15 minutes of easy running\\n\\n### Notes:\\n* The athlete should listen to their body and adjust the intensity and volume of training based on how they feel.\\n* The athlete should also pay attention to their nutrition and hydration to ensure they are fueling their body for optimal performance.\\n* The athlete should aim to get 7-9 hours of sleep each night to aid in recovery.\\n* The athlete should also incorporate rest and recovery techniques such as foam rolling, stretching, and self-myofascial release to aid in recovery.\\n* It is essential to stay on track with the plan and complete all the workouts as scheduled to achieve the goal of completing a 100Km ultra trail with 5000m elevation by March 9, 2025.\"\nnew_plan_3 =\"Dates:29/01/2025 - 04/02/2025\\n### Bird's eye view: \\nThe workout plan for the next week will focus on building the athlete's endurance, strength, and mobility to reach the goal of completing a 100km trail run by 28/06/2025. The plan will include a mix of easy runs, tempo workouts, hill repeats, and long runs to improve cardiovascular fitness and running efficiency. Strength training and mobility workouts will be added to enhance muscular endurance, flexibility, and injury prevention.\\n\\n### Workout Plan:\\n#### Monday \\n- Easy Run: 10km at 06:30 min/km pace\\n- Strength Training: Lower Body Workout (Squats, Lunges, Calf Raises)\\n  * Warm-up: 10-15 minutes of light cardio and dynamic stretching\\n  * Squats: 3 sets of 10 reps\\n  * Lunges: 3 sets of 10 reps (per leg)\\n  * Calf Raises: 3 sets of 15 reps\\n  * Cool-down: 10-15 minutes of static stretching\\n\\n#### Tuesday \\n- Tempo Workout: 6km at 05:30 min/km pace\\n- Mobility Workout: Foam Rolling and Self-Myofascial Release (Focus on IT Band, Calves, and Quads)\\n  * 10-15 minutes of foam rolling and self-myofascial release\\n\\n#### Wednesday \\n- Hill Repeats: 8km (4km uphill at 07:00 min/km pace, 4km downhill at 05:00 min/km pace)\\n- Strength Training: Core Workout (Planks, Russian Twists, Leg Raises)\\n  * Warm-up: 10-15 minutes of light cardio and dynamic stretching\\n  * Planks: 3 sets of 30-second hold\\n  * Russian Twists: 3 sets of 15 reps\\n  * Leg Raises: 3 sets of 15 reps\\n  * Cool-down: 10-15 minutes of static stretching\\n\\n#### Thursday \\n- Easy Run: 10km at 06:30 min/km pace\\n- Mobility Workout: Yoga or Active Recovery (Focus on Hip Flexors, Hamstrings, and Lower Back)\\n  * 30-45 minutes of yoga or active recovery\\n\\n#### Friday \\n- Long Run: 25km at 06:15 min/km pace\\n- Strength Training: Upper Body Workout (Push-ups, Pull-ups, Dumbbell Rows)\\n  * Warm-up: 10-15 minutes of light cardio and dynamic stretching\\n  * Push-ups: 3 sets of 10 reps\\n  * Pull-ups: 3 sets of as many reps as possible\\n  * Dumbbell Rows: 3 sets of 10 reps (per arm)\\n  * Cool-down: 10-15 minutes of static stretching\\n\\n#### Saturday \\n- Rest Day or Active Recovery (30-45 minutes of easy cycling, swimming, or walking)\\n\\n#### Sunday \\n- Rest Day or Active Recovery (30-45 minutes of easy cycling, swimming, or walking)\\n\\n### Notes:\\n* Make sure to warm up and cool down properly before and after each workout\\n* Incorporate proper nutrition and hydration to support training and recovery\\n* Listen to your body and adjust the plan as needed to avoid injury or burnout\\n* Get at least 7-9 hours of sleep each night to aid in recovery and adaptation\\n* Incorporate visualization techniques and positive self-talk to enhance mental preparation and resilience\\n* Review and adjust the plan with your coach or trainer on a regular basis to ensure progress towards your goal.\"",
        "detail": "test_plan_data",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "test_strava_activity",
        "description": "test_strava_activity",
        "peekOfCode": "headers = {'Authorization': f'Bearer {access_token}'}   \nactivity_id =115832357\nlatest_activity_url = f\"https://www.strava.com/api/v3/activities/{activity_id}\"\n# latest_activity_url = f\"https://www.strava.com/api/v3/recent_run_totals\"\n# latest_activity_response = utils.make_url_request(activity_url=latest_activity_url, headers=headers)\n# if latest_activity_response:\n#     latest_activity_data = latest_activity_response.json()\n# latest_activity_id = latest_activity_data.id\nathlete_id = 64768690\ninputs={",
        "detail": "test_strava_activity",
        "documentation": {}
    },
    {
        "label": "latest_activity_url",
        "kind": 5,
        "importPath": "test_strava_activity",
        "description": "test_strava_activity",
        "peekOfCode": "latest_activity_url = f\"https://www.strava.com/api/v3/activities/{activity_id}\"\n# latest_activity_url = f\"https://www.strava.com/api/v3/recent_run_totals\"\n# latest_activity_response = utils.make_url_request(activity_url=latest_activity_url, headers=headers)\n# if latest_activity_response:\n#     latest_activity_data = latest_activity_response.json()\n# latest_activity_id = latest_activity_data.id\nathlete_id = 64768690\ninputs={\n        \"activity_id\":activity_id,\n        \"athlete_id\":athlete_id",
        "detail": "test_strava_activity",
        "documentation": {}
    },
    {
        "label": "athlete_id",
        "kind": 5,
        "importPath": "test_strava_activity",
        "description": "test_strava_activity",
        "peekOfCode": "athlete_id = 64768690\ninputs={\n        \"activity_id\":activity_id,\n        \"athlete_id\":athlete_id\n    }\n# strava2.get_latest_activities(inputs)\n# print(latest_activity_data)",
        "detail": "test_strava_activity",
        "documentation": {}
    },
    {
        "label": "update_activity",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def update_activity(activity_url, update_json, headers):\n    update_response = requests.put(activity_url, headers=headers, json=update_json)\n    if update_response.status_code == 200:\n        message =\"Activity description updated successfully.\"\n    else:\n        message=f\"Error updating activity description: {update_response.status_code}, Error description : {update_response.text}\"\n    return message\ndef make_url_request(activity_url, headers):\n    activity_response = requests.get(activity_url, headers=headers)\n    if(activity_response.status_code == 200):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "make_url_request",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def make_url_request(activity_url, headers):\n    activity_response = requests.get(activity_url, headers=headers)\n    if(activity_response.status_code == 200):\n        return activity_response\n    else:\n            print(f\"Error while getting activity: {activity_response.status_code}, Error description : {activity_response.text}\")\ndef update_description(activity_data, summary):\n    description = activity_data['description']\n    if description == \"\" or description is None:\n        updated_description = f\"{summary}\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "update_description",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def update_description(activity_data, summary):\n    description = activity_data['description']\n    if description == \"\" or description is None:\n        updated_description = f\"{summary}\"\n    else:    \n        updated_description = f\"{description} {summary}\"\n    update_json = {\"description\": updated_description}\n    return update_json\ndef convert_seconds_in_hhmmss(seconds):\n    hours = int(seconds//3600)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "convert_seconds_in_hhmmss",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def convert_seconds_in_hhmmss(seconds):\n    hours = int(seconds//3600)\n    minutes = int((seconds%3600)//60)\n    seconds = int(seconds % 60)\n    return str(hours).zfill(2) +':' + str(minutes).zfill(2) +':'+ str(seconds).zfill(2)\ndef convert_speed_to_pace(speed_m_per_s):\n    if speed_m_per_s <= 0:\n        return \"Speed must be greater than 0\"\n    # Convert speed to pace in min/km\n    pace_min_per_km = (1000 / speed_m_per_s) / 60",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "convert_speed_to_pace",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def convert_speed_to_pace(speed_m_per_s):\n    if speed_m_per_s <= 0:\n        return \"Speed must be greater than 0\"\n    # Convert speed to pace in min/km\n    pace_min_per_km = (1000 / speed_m_per_s) / 60\n    minutes = int(pace_min_per_km)  # Whole minutes\n    seconds = int((pace_min_per_km - minutes) * 60)  # Remaining seconds\n    return f\"{minutes}:{seconds:02d} min/km\"\ndef pace_to_speed(pace_str):\n    \"\"\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "pace_to_speed",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def pace_to_speed(pace_str):\n    \"\"\"\n    Convert a pace string in the format 'mm:ss min/km' to speed in m/s.\n    \"\"\"\n    # Split the string into minutes and seconds\n    pace_str = pace_str.replace(\" min/km\", \"\")\n    minutes, seconds = map(int, pace_str.split(\":\"))\n    # Convert pace (min/km) to total seconds per kilometer\n    total_seconds_per_km = minutes * 60 + seconds\n    # Convert to speed in m/s (meters per second)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_speed",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def calculate_speed(moving_time, distance):\n    if distance == 0:\n        return \"00:00 min/Km\"\n    else:\n        mov_speed_min, mov_speed_sec = map(int, divmod(moving_time / distance, 60))\n        return f\"{mov_speed_min:02d}:{mov_speed_sec:02d} min/Km\"\ndef calculate_speed_in_kmph(moving_time, distance):\n    if moving_time == 0:\n        return \"0.00 km/hr\"\n    else:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_speed_in_kmph",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def calculate_speed_in_kmph(moving_time, distance):\n    if moving_time == 0:\n        return \"0.00 km/hr\"\n    else:\n        speed_kph = (distance / 1000) / (moving_time / 3600)\n        return f\"{speed_kph:.2f} km/hr\"\ndef calculate_pace_minKm(moving_time, distance):\n    if distance == 0:\n        return \"00:00 min/Km\"\n    else:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_pace_minKm",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def calculate_pace_minKm(moving_time, distance):\n    if distance == 0:\n        return \"00:00 min/Km\"\n    else:\n        pace_seconds_per_km = moving_time / (distance / 1000)\n        pace_minutes = int(pace_seconds_per_km // 60)\n        pace_seconds = int(pace_seconds_per_km % 60)\n        return f\"{pace_minutes:02d}:{pace_seconds:02d} min/Km\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "WorkoutClassifier",
        "kind": 6,
        "importPath": "workout_classifier",
        "description": "workout_classifier",
        "peekOfCode": "class WorkoutClassifier:\n    def __init__(self, activities, headers):\n        self.activities = activities if activities else []\n        self.headers = headers if headers else {}\n        self._validate_inputs()\n        # Initialize components with error handling\n        try:\n            self.stats = self._calculate_statistical_baselines()\n            self.sport_profiles = self._create_sport_profiles()\n            self.athlete_baselines = self._calculate_athlete_baselines()",
        "detail": "workout_classifier",
        "documentation": {}
    },
    {
        "label": "get_run_type",
        "kind": 2,
        "importPath": "workout_classifier",
        "description": "workout_classifier",
        "peekOfCode": "def get_run_type(activities, headers):\n    \"\"\"Public API with complete validation\"\"\"\n    try:\n        if not activities or not headers:\n            logger.error(\"Invalid input: empty activities or headers\")\n            return []\n        if not isinstance(activities, list) or not isinstance(headers, dict):\n            logger.error(\"Invalid input types\")\n            return []\n        classifier = WorkoutClassifier(activities, headers)",
        "detail": "workout_classifier",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "workout_classifier",
        "description": "workout_classifier",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\nclass WorkoutClassifier:\n    def __init__(self, activities, headers):\n        self.activities = activities if activities else []\n        self.headers = headers if headers else {}\n        self._validate_inputs()\n        # Initialize components with error handling\n        try:\n            self.stats = self._calculate_statistical_baselines()",
        "detail": "workout_classifier",
        "documentation": {}
    },
    {
        "label": "WorkoutClassifier",
        "kind": 6,
        "importPath": "workout_classifier_testing",
        "description": "workout_classifier_testing",
        "peekOfCode": "class WorkoutClassifier:\n    def __init__(self, activities, headers):\n        self.activities = activities if activities else []\n        self.headers = headers if headers else {}\n        self._validate_inputs()\n        # Initialize components with error handling\n        try:\n            self.stats = self._calculate_statistical_baselines()\n            self.sport_profiles = self._create_sport_profiles()\n            self.athlete_baselines = self._calculate_athlete_baselines()",
        "detail": "workout_classifier_testing",
        "documentation": {}
    },
    {
        "label": "get_run_type",
        "kind": 2,
        "importPath": "workout_classifier_testing",
        "description": "workout_classifier_testing",
        "peekOfCode": "def get_run_type(activities,latest_activity,  headers, ):\n    \"\"\"Public API with complete validation\"\"\"\n    try:\n        if not activities or not headers:\n            logger.error(\"Invalid input: empty activities or headers\")\n            return []\n        if not isinstance(activities, list) or not isinstance(headers, dict):\n            logger.error(\"Invalid input types\")\n            return []\n        classifier = WorkoutClassifier(activities, headers)",
        "detail": "workout_classifier_testing",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "workout_classifier_testing",
        "description": "workout_classifier_testing",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\nclass WorkoutClassifier:\n    def __init__(self, activities, headers):\n        self.activities = activities if activities else []\n        self.headers = headers if headers else {}\n        self._validate_inputs()\n        # Initialize components with error handling\n        try:\n            self.stats = self._calculate_statistical_baselines()",
        "detail": "workout_classifier_testing",
        "documentation": {}
    }
]