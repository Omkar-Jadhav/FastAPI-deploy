[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "flask",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flask",
        "description": "flask",
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "strava",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "strava",
        "description": "strava",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database",
        "description": "database",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "certifi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "certifi",
        "description": "certifi",
        "detail": "certifi",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo.mongo_client",
        "description": "pymongo.mongo_client",
        "isExtraImport": true,
        "detail": "pymongo.mongo_client",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo.mongo_client",
        "description": "pymongo.mongo_client",
        "isExtraImport": true,
        "detail": "pymongo.mongo_client",
        "documentation": {}
    },
    {
        "label": "decimal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal",
        "description": "decimal",
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "ROUND_HALF_UP",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "tabulate",
        "importPath": "tabulate",
        "description": "tabulate",
        "isExtraImport": true,
        "detail": "tabulate",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "wsgi",
        "description": "wsgi",
        "isExtraImport": true,
        "detail": "wsgi",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "time,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time.",
        "description": "time.",
        "detail": "time.",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "data_processing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "data_processing",
        "description": "data_processing",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def start():\n    return render_template('index.html')\n@app.route(\"/health\")\ndef health_check():\n    return jsonify({\"status\": \"healthy\"})\n@app.route('/webhook', methods=['GET', 'POST'])\ndef webhook():\n    if request.method == 'GET':\n        return verify_webhook()\n    elif request.method == 'POST':",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def health_check():\n    return jsonify({\"status\": \"healthy\"})\n@app.route('/webhook', methods=['GET', 'POST'])\ndef webhook():\n    if request.method == 'GET':\n        return verify_webhook()\n    elif request.method == 'POST':\n        return handle_webhook()\n@app.route('/getCode')\ndef get_code():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "webhook",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def webhook():\n    if request.method == 'GET':\n        return verify_webhook()\n    elif request.method == 'POST':\n        return handle_webhook()\n@app.route('/getCode')\ndef get_code():\n    return render_template('code.html')\n@app.route('/saveRefreshToken', methods=['POST'])\ndef save_refresh_token():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_code",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_code():\n    return render_template('code.html')\n@app.route('/saveRefreshToken', methods=['POST'])\ndef save_refresh_token():\n    data = request.get_json()\n    refresh_token = data.get('refresh_token')\n    athlete = data.get('athlete')\n    if not (refresh_token and athlete):\n        return jsonify({\"error\": \"Invalid data format\"}), 400\n    athlete_id = athlete.get('id')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "save_refresh_token",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def save_refresh_token():\n    data = request.get_json()\n    refresh_token = data.get('refresh_token')\n    athlete = data.get('athlete')\n    if not (refresh_token and athlete):\n        return jsonify({\"error\": \"Invalid data format\"}), 400\n    athlete_id = athlete.get('id')\n    athlete_name = f\"{athlete.get('firstname')} {athlete.get('lastname')}\"\n    try:\n        client = database.initiate_mango_connection()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "auth_success_page",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def auth_success_page():\n    return render_template('authSuccessPage.html')    \n@app.route('/alreadyAuthorized')\ndef already_authorized():\n    return render_template('alreadyAuthorized.html')    \n# Helper Functions\ndef verify_webhook():\n    mode = request.args.get('hub.mode')\n    token = request.args.get('hub.verify_token')\n    challenge = request.args.get('hub.challenge')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "already_authorized",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def already_authorized():\n    return render_template('alreadyAuthorized.html')    \n# Helper Functions\ndef verify_webhook():\n    mode = request.args.get('hub.mode')\n    token = request.args.get('hub.verify_token')\n    challenge = request.args.get('hub.challenge')\n    if mode == 'subscribe' and token == VERIFY_TOKEN:\n        return jsonify({\"hub.challenge\": challenge}), 200\n    else:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "verify_webhook",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def verify_webhook():\n    mode = request.args.get('hub.mode')\n    token = request.args.get('hub.verify_token')\n    challenge = request.args.get('hub.challenge')\n    if mode == 'subscribe' and token == VERIFY_TOKEN:\n        return jsonify({\"hub.challenge\": challenge}), 200\n    else:\n        return \"Invalid verification token\", 403\ndef handle_webhook():\n    latest_activity_id = request.json.get('object_id')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "handle_webhook",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def handle_webhook():\n    latest_activity_id = request.json.get('object_id')\n    athlete_id = request.json.get('owner_id')\n    logger.info(f\"request inputs are {request.args}\")\n    print(f\"Webhook event received with activity:{latest_activity_id} for athlete ID: {athlete_id}\")\n    inputs={\n        \"activity_id\":latest_activity_id,\n        \"athlete_id\":athlete_id\n    }\n    logger.info(f\"Inputs were{inputs}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)  # Adjust logging level as needed\napp = Flask(__name__)\n# Constants\nVERIFY_TOKEN = \"STRAVA\"\nDATA_FILE = \"refresh_tokens.json\"\n# Routes\n@app.route(\"/\")\ndef start():\n    return render_template('index.html')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n# Constants\nVERIFY_TOKEN = \"STRAVA\"\nDATA_FILE = \"refresh_tokens.json\"\n# Routes\n@app.route(\"/\")\ndef start():\n    return render_template('index.html')\n@app.route(\"/health\")\ndef health_check():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "VERIFY_TOKEN",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "VERIFY_TOKEN = \"STRAVA\"\nDATA_FILE = \"refresh_tokens.json\"\n# Routes\n@app.route(\"/\")\ndef start():\n    return render_template('index.html')\n@app.route(\"/health\")\ndef health_check():\n    return jsonify({\"status\": \"healthy\"})\n@app.route('/webhook', methods=['GET', 'POST'])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "DATA_FILE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "DATA_FILE = \"refresh_tokens.json\"\n# Routes\n@app.route(\"/\")\ndef start():\n    return render_template('index.html')\n@app.route(\"/health\")\ndef health_check():\n    return jsonify({\"status\": \"healthy\"})\n@app.route('/webhook', methods=['GET', 'POST'])\ndef webhook():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "initiate_mango_connection",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def initiate_mango_connection():\n    \"\"\"Connects to the MongoDB database and logs success or errors.\"\"\"\n    ca = certifi.where()  # Load the updated CA bundle\n    uri = os.environ.get(\"mango_url\")\n    logger.debug(\"Connecting to MongoDB with URI: %s\", uri)\n    try:\n        # Create a new client and connect to the server\n        client = MongoClient(uri, tlsCAFile=ca)\n        logger.info(\"Before ping!\")\n        # Send a ping to confirm a successful connection",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "check_athlete_in_data",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def check_athlete_in_data(client, athlete_id):\n    \"\"\"Checks if an athlete ID exists in the database and logs results.\"\"\"\n    logger.debug(\"Checking for athlete ID %s in database\", athlete_id)\n    db = client[\"strava\"]\n    collection = db[\"refresh tokens\"]\n    logger.info(\"before find\")\n    results = collection.find({\"athlete_id\":athlete_id})\n    logger.info(results)\n    for result in results:\n        # logger.debug(\"Found document: %s\", result)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "save_athlete_data",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def save_athlete_data(client, data):\n    \"\"\"Saves athlete data to the database and logs success or errors.\"\"\"\n    athlete_id = data[\"athlete_id\"]\n    refresh_token = data[\"refresh_token\"]\n    athlete_name = data[\"athlete_name\"]\n    db = client[\"strava\"]\n    collection = db[\"refresh tokens\"]\n    try:\n        collection.insert_one({\n            \"athlete_id\": athlete_id,",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_access_token_for_athlete",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_access_token_for_athlete(athlete_id):\n    client=initiate_mango_connection()\n    db = client[\"strava\"]\n    collection = db[\"refresh tokens\"]\n    results = collection.find({\"athlete_id\":athlete_id})\n    logger.info(results)\n    refresh_token =\"\"\n    for result in results:\n        logger.info(result)\n        refresh_token = result.get(\"refresh_token\")",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "close_client",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def close_client(client):\n    \"\"\"Closes the connection to the MongoDB client and logs it.\"\"\"\n    logger.info(\"Closing connection to MongoDB\")\n    client.close()\ndef delete_all_data(client):\n    \"\"\"Deletes all data from the collection and logs the action.\"\"\"\n    db = client[\"database-name\"]\n    collection = db[\"collection-name\"]\n    logger.info(\"Deleting all data from collection\")\n    result = collection.delete_many({})",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "delete_all_data",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def delete_all_data(client):\n    \"\"\"Deletes all data from the collection and logs the action.\"\"\"\n    db = client[\"database-name\"]\n    collection = db[\"collection-name\"]\n    logger.info(\"Deleting all data from collection\")\n    result = collection.delete_many({})\n    logger.info(\"Deleted %d documents\", result.deleted_count)\ndef test_saving():\n    client = initiate_mango_connection()\n    # delete_all_data(client)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "test_saving",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def test_saving():\n    client = initiate_mango_connection()\n    # delete_all_data(client)\n    test_json = {\n    \"athlete_id\": \"64768690\",\n        \"refresh_token\": \"239efcb1a295abda6e7d930587d120817cb5997d\",\n        \"athlete_name\": \"Omkar Jadhav\"\n    }\n    message = save_athlete_data(client,test_json)\n    refresh_token=check_athlete_in_data(client,test_json[\"athlete_id\"])",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)  # Adjust logging level as needed\ndef initiate_mango_connection():\n    \"\"\"Connects to the MongoDB database and logs success or errors.\"\"\"\n    ca = certifi.where()  # Load the updated CA bundle\n    uri = os.environ.get(\"mango_url\")\n    logger.debug(\"Connecting to MongoDB with URI: %s\", uri)\n    try:\n        # Create a new client and connect to the server\n        client = MongoClient(uri, tlsCAFile=ca)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "TimeConverter",
        "kind": 6,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "class TimeConverter:\n    @staticmethod\n    def seconds_to_hhmmss(seconds):\n        hours = int(seconds//3600)\n        minutes = int((seconds%3600)//60)\n        seconds = int(seconds % 60)\n        return f\"{hours:02d}:{minutes:02d}:{seconds:02d}\"\nclass SpeedCalculator:\n    @staticmethod\n    def pace_per_km(moving_time, distance):",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "SpeedCalculator",
        "kind": 6,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "class SpeedCalculator:\n    @staticmethod\n    def pace_per_km(moving_time, distance):\n        # Using Decimal for precise division\n        try:\n            pace = Decimal(str(moving_time)) / Decimal(str(distance))\n            mov_speed_min, mov_speed_sec = divmod(float(pace), 60)\n            return f\"{int(mov_speed_min):02d}:{int(mov_speed_sec):02d} min/Km\"\n        except (ZeroDivisionError, decimal.InvalidOperation):\n            return \"0:00 min/Km\"",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "ActivitySummaryBase",
        "kind": 6,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "class ActivitySummaryBase:\n    def __init__(self):\n        self.footer = \"\\n \\n Subscribe on https://strava-summariser.vercel.app/ \\nStats created using StravaAPI by Omkar Jadhav\"\n    def create_summary_table(self, title, data):\n        table = tabulate(data, tablefmt=\"plain\")\n        return f\"\\n{title}\\n{table}{self.footer}\"\n    def format_with_precision(self, value, precision=2):\n        \"\"\"\n        Format a number with specified precision using Decimal for accurate rounding\n        \"\"\"",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "TimedActivitySummary",
        "kind": 6,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "class TimedActivitySummary(ActivitySummaryBase):\n    def calculate_basic_stats(self, activities, time_field='moving_time'):\n        total_time = sum(activity[time_field] for activity in activities)\n        total_sessions = len(activities)\n        avg_session = total_time / total_sessions if total_sessions else 0\n        return {\n            'total_sessions': total_sessions,\n            'total_time': TimeConverter.seconds_to_hhmmss(total_time),\n            'avg_session': TimeConverter.seconds_to_hhmmss(round(avg_session, 2))\n        }",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "DistanceActivitySummary",
        "kind": 6,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "class DistanceActivitySummary(ActivitySummaryBase):\n    def calculate_distance_stats(self, activities):\n        total_distance = Decimal('0')\n        total_elevation = Decimal('0')\n        total_sessions = len(activities)\n        # Calculate totals using Decimal\n        for activity in activities:\n            total_distance += Decimal(str(activity['distance'])) / Decimal('1000')\n            total_elevation += Decimal(str(activity['total_elevation_gain']))\n        # Calculate averages and format results",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "WeightTrainingSummary",
        "kind": 6,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "class WeightTrainingSummary(TimedActivitySummary):\n    def generate_summary(self, activities):\n        stats = self.calculate_basic_stats(activities)\n        data = [\n            [\"Total strength_training sessions:\", f\"{stats['total_sessions']}\"],\n            [\"Avg strength_training session:\", f\"{stats['avg_session']}\"],\n            [\"Total strength_training time:\", f\"{stats['total_time']}\"],\n        ]\n        return self.create_summary_table(\"Four Week Overall strength training Summary\", data)\nclass YogaSummary(TimedActivitySummary):",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "YogaSummary",
        "kind": 6,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "class YogaSummary(TimedActivitySummary):\n    def generate_summary(self, activities):\n        stats = self.calculate_basic_stats(activities, 'elapsed_time')\n        data = [\n            [\"Total yoga sessions:\", f\"{stats['total_sessions']}\"],\n            [\"Avg yoga session:\", f\"{stats['avg_session']}\"],\n            [\"Total yoga time:\", f\"{stats['total_time']}\"],\n        ]\n        return self.create_summary_table(\"Four-Week Rolling Overall Yoga Summary\", data)\nclass SwimSummary(TimedActivitySummary):",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "SwimSummary",
        "kind": 6,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "class SwimSummary(TimedActivitySummary):\n    def generate_summary(self, activities):\n        stats = self.calculate_basic_stats(activities, 'elapsed_time')\n        data = [\n            [\"Total swim sessions:\", f\"{stats['total_sessions']}\"],\n            [\"Avg swim session:\", f\"{stats['avg_session']}\"],\n            [\"Total swim time:\", f\"{stats['total_time']}\"],\n        ]\n        return self.create_summary_table(\"Four-Week Rolling Swim Summary\", data)\nclass RideSummary(DistanceActivitySummary):",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "RideSummary",
        "kind": 6,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "class RideSummary(DistanceActivitySummary):\n    def generate_summary(self, activities):\n        stats = self.calculate_distance_stats(activities)\n        total_time = sum(activity['moving_time'] for activity in activities)\n        total_distance = float(stats['total_distance'])\n        data = [\n            [\"Total ride sessions:\", f\"{stats['total_sessions']}\"],\n            [\"Avg ride time:\", f\"{stats['avg_session']}\"],\n            [\"Total ride time:\", f\"{stats['total_time']}\"],\n            [\"Total ride distance:\", f\"{stats['total_distance']} Km\"],",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "RunSummary",
        "kind": 6,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "class RunSummary(DistanceActivitySummary):\n    def _split_activities_by_type(self, activities):\n        road_runs = [a for a in activities if a['sport_type'] == 'Run']\n        trail_runs = [a for a in activities if a['sport_type'] == 'TrailRun']\n        return road_runs, trail_runs\n    def generate_summary(self, activities):\n        overall_stats = self.calculate_distance_stats(activities)\n        road_runs, trail_runs = self._split_activities_by_type(activities)\n        total_moving_time = sum(a['moving_time'] for a in activities)\n        total_elapsed_time = sum(a['elapsed_time'] for a in activities)",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "WalkSummary",
        "kind": 6,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "class WalkSummary(DistanceActivitySummary):\n    def generate_summary(self, activities):\n        stats = self.calculate_distance_stats(activities)\n        total_moving_time = sum(a['moving_time'] for a in activities)\n        total_elapsed_time = sum(a['elapsed_time'] for a in activities)\n        total_distance = float(stats['total_distance'])\n        data = [\n            [\"Total walks: \", f\"{stats['total_sessions']}\"],\n            [\"Total distance: \", f\"{stats['total_distance']} Km\"],\n            [\"Average distance:\", f\"{stats['avg_distance']} Km/walk\"],",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_weighttraining_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_weighttraining_summary(activities):\n    return WeightTrainingSummary().generate_summary(activities)\ndef give_yoga_summary(activities):\n    return YogaSummary().generate_summary(activities)\ndef give_swim_summary(activities):\n    return SwimSummary().generate_summary(activities)\ndef give_ride_summary(activities):\n    return RideSummary().generate_summary(activities)\ndef give_run_summary(activities):\n    return RunSummary().generate_summary(activities)",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_yoga_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_yoga_summary(activities):\n    return YogaSummary().generate_summary(activities)\ndef give_swim_summary(activities):\n    return SwimSummary().generate_summary(activities)\ndef give_ride_summary(activities):\n    return RideSummary().generate_summary(activities)\ndef give_run_summary(activities):\n    return RunSummary().generate_summary(activities)\ndef give_walk_summary(activities):\n    return WalkSummary().generate_summary(activities)",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_swim_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_swim_summary(activities):\n    return SwimSummary().generate_summary(activities)\ndef give_ride_summary(activities):\n    return RideSummary().generate_summary(activities)\ndef give_run_summary(activities):\n    return RunSummary().generate_summary(activities)\ndef give_walk_summary(activities):\n    return WalkSummary().generate_summary(activities)",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_ride_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_ride_summary(activities):\n    return RideSummary().generate_summary(activities)\ndef give_run_summary(activities):\n    return RunSummary().generate_summary(activities)\ndef give_walk_summary(activities):\n    return WalkSummary().generate_summary(activities)",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_run_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_run_summary(activities):\n    return RunSummary().generate_summary(activities)\ndef give_walk_summary(activities):\n    return WalkSummary().generate_summary(activities)",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_walk_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_walk_summary(activities):\n    return WalkSummary().generate_summary(activities)",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "get_access_token",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens\n    if refresh_token is not None:\n        # Retrieve the refresh_token for the athlete_id\n        logger.info('inside if refresh-token condition')\n        REFRESH_TOKEN = refresh_token",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "get_latest_activities",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def get_latest_activities(inputs):\n    logging.info('Inside get_latest_activities')\n    latest_activity_id = inputs.get('activity_id')\n    athlete_id = inputs.get('athlete_id')\n    # Step 1: Retrieve Access Token\n    access_token = get_access_token(athlete_id)\n    logging.info('Access token retrieved')\n    # Step 2: Define API Endpoint and Parameters\n    BEFORE = int(time.time()) \n    AFTER = int(time.time()) - (28 * 24 * 60 * 60)  # Exactly 4 weeks",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)  # Adjust logging level as needed\n# Replace these with your Strava API credentials\nCLIENT_ID = '114698'\nCLIENT_SECRET = '858dd455b9a1d41095727a9285943ec4210810b2'\n# REFRESH_TOKEN = '239efcb1a295abda6e7d930587d120817cb5997d'\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "CLIENT_ID = '114698'\nCLIENT_SECRET = '858dd455b9a1d41095727a9285943ec4210810b2'\n# REFRESH_TOKEN = '239efcb1a295abda6e7d930587d120817cb5997d'\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "CLIENT_SECRET = '858dd455b9a1d41095727a9285943ec4210810b2'\n# REFRESH_TOKEN = '239efcb1a295abda6e7d930587d120817cb5997d'\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens\n    if refresh_token is not None:",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "uri",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "uri = \"mongodb+srv://omkarjadhav00:mango@strava-token.6r1ebob.mongodb.net/?ssl=true&ssl_cert_reqs=CERT_NONE&retryWrites=true&w=majority\"\n# Create a new client and connect to the server\nclient = MongoClient(uri)\n# Send a ping to confirm a successful connection\ntry:\n    client.admin.command('ping')\n    print(\"Pinged your deployment. You successfully connected to MongoDB!\")\nexcept Exception as e:\n    print(e)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "client = MongoClient(uri)\n# Send a ping to confirm a successful connection\ntry:\n    client.admin.command('ping')\n    print(\"Pinged your deployment. You successfully connected to MongoDB!\")\nexcept Exception as e:\n    print(e)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "update_activity",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def update_activity(activity_url, update_json, headers):\n    update_response = requests.put(activity_url, headers=headers, json=update_json)\n    if update_response.status_code == 200:\n        message =\"Activity description updated successfully.\"\n    else:\n        message=f\"Error updating activity description: {update_response.status_code}, Error description : {update_response.text}\"\n    return message\ndef make_url_request(activity_url, headers):\n    activity_response = requests.get(activity_url, headers=headers)\n    if(activity_response.status_code == 200):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "make_url_request",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def make_url_request(activity_url, headers):\n    activity_response = requests.get(activity_url, headers=headers)\n    if(activity_response.status_code == 200):\n        return activity_response\n    else:\n            print(f\"Error while getting activity: {activity_response.status_code}, Error description : {activity_response.text}\")\ndef update_description(activity_data, summary):\n    description = activity_data['description']\n    if description == \"\" or description is None:\n        updated_description = f\"{summary}\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "update_description",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def update_description(activity_data, summary):\n    description = activity_data['description']\n    if description == \"\" or description is None:\n        updated_description = f\"{summary}\"\n    else:    \n        updated_description = f\"{description} {summary}\"\n    update_json = {\"description\": updated_description}\n    return update_json",
        "detail": "utils",
        "documentation": {}
    }
]