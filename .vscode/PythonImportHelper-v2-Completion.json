[
    {
        "label": "Groq",
        "importPath": "groq",
        "description": "groq",
        "isExtraImport": true,
        "detail": "groq",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "flask",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flask",
        "description": "flask",
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "ai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ai",
        "description": "ai",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "get_insights_by_llm",
        "importPath": "ai",
        "description": "ai",
        "isExtraImport": true,
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "get_insights_by_llm",
        "importPath": "ai",
        "description": "ai",
        "isExtraImport": true,
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "strava",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "strava",
        "description": "strava",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "database",
        "description": "database",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "athlete_id",
        "importPath": "test_strava_activity",
        "description": "test_strava_activity",
        "isExtraImport": true,
        "detail": "test_strava_activity",
        "documentation": {}
    },
    {
        "label": "workout_classifier_testing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "workout_classifier_testing",
        "description": "workout_classifier_testing",
        "detail": "workout_classifier_testing",
        "documentation": {}
    },
    {
        "label": "strava_v2_testing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "certifi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "certifi",
        "description": "certifi",
        "detail": "certifi",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo.mongo_client",
        "description": "pymongo.mongo_client",
        "isExtraImport": true,
        "detail": "pymongo.mongo_client",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo.mongo_client",
        "description": "pymongo.mongo_client",
        "isExtraImport": true,
        "detail": "pymongo.mongo_client",
        "documentation": {}
    },
    {
        "label": "tabulate",
        "importPath": "tabulate",
        "description": "tabulate",
        "isExtraImport": true,
        "detail": "tabulate",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "convert_seconds_in_hhmmss",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_speed_in_kmph",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_speed",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_pace_minKm",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_pace_minKm",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "wsgi",
        "description": "wsgi",
        "isExtraImport": true,
        "detail": "wsgi",
        "documentation": {}
    },
    {
        "label": "time,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time.",
        "description": "time.",
        "detail": "time.",
        "documentation": {}
    },
    {
        "label": "data_processing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "data_processing",
        "description": "data_processing",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "workout_classifier",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "workout_classifier",
        "description": "workout_classifier",
        "detail": "workout_classifier",
        "documentation": {}
    },
    {
        "label": "get_run_type",
        "importPath": "workout_classifier",
        "description": "workout_classifier",
        "isExtraImport": true,
        "detail": "workout_classifier",
        "documentation": {}
    },
    {
        "label": "get_run_type",
        "importPath": "workout_classifier",
        "description": "workout_classifier",
        "isExtraImport": true,
        "detail": "workout_classifier",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_insights_by_llm",
        "kind": 2,
        "importPath": "ai",
        "description": "ai",
        "peekOfCode": "def get_insights_by_llm(avg_stats, past_runs):\n    inp_message = f\"\"\"Act as a helpful running coach. \nPresent insights and key data points from the athlete's past 4 weeks of running activity in under 100 words. Sugggest a general focus for upcoming week, and suggested acticvities for next 2 days. \nAvoid mentioning obvious statistics from summary. Do not use first person voice.\nEncourage, motivate, and applaud the athlete. \nThe workout history includes various runs like long runs, tempo runs, easy runs, recovery runs, intervals, and trail run, with additional details for some activities such as lap times, average pace, and total elevation gain. Based on the recent workouts/intervals/long runs or races in last 5 workouts suggest upcoming weeks focus. Workouts are numbered by a descending order of date. Take a comprehensive approah in suggesting the workouts considering the athlete's past runs where depending on recent workouts you should suggest easy runs/ tempo runs/ intervals/ long runs/ hill workouts or a recovery run.  \nIf past runs are not available, then only suggest a general focus for the upcoming week and activities for the next 2 days. Use at most 3/4 emojis to make the message more engaging only if necessary.\nHere is the athlete's workout history.\n4 week rolling summary: {avg_stats}\nPrevious 4 weeks running history: {past_runs}\"\"\"",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "analyse_past_3m_runs",
        "kind": 2,
        "importPath": "ai",
        "description": "ai",
        "peekOfCode": "def analyse_past_3m_runs(activities, athlete_baseline):\n    inp_message = f\"\"\"Act as a helpful and professiona running coach and data analyst.\n    You are presented with the workout history of an athlete for the past 3 months. \n    The athlete's past 3 months activities include various runs like long runs, tempo runs, easy runs, recovery runs, intervals, and trail run, with additional details for some activities such as lap times, average pace, and total elevation gain.\n    Analyse the athlete's past 3 months of running activity and provide a summarised version of athlete's past 3 months running history. The summary should be detailed such that based on this data further workout plans can be generated. DO NOT PROVIDE ANY SUGGSTIONS yet.\n    Past 3 months running history is as follows: {activities}\n    \"\"\"\n    completion = client.chat.completions.create(\n        model=\"llama-3.3-70b-versatile\",\n        messages=[",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "get_response_from_groq",
        "kind": 2,
        "importPath": "ai",
        "description": "ai",
        "peekOfCode": "def get_response_from_groq(inp_message):\n    completion = client.chat.completions.create(\n        model=\"llama-3.3-70b-versatile\",\n        messages=[\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful and professional running coach.\"\n            },\n            {\n                \"role\": \"user\",",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "get_response_from_deepseek",
        "kind": 2,
        "importPath": "ai",
        "description": "ai",
        "peekOfCode": "def get_response_from_deepseek(inp_message):\n    client = OpenAI(api_key=os.environ.get(\"DEEPSEEK_API_KEY\"), base_url=\"https://api.deepseek.com\")\n    messages = [{\"role\": \"user\", \"content\": f\"{inp_message}\"}]\n    response = client.chat.completions.create(\n        model=\"deepseek-reasoner\",\n        messages=messages\n    )\n    return response.choices[0].message.content, response.choices[0].message.reasoning_content",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "ai",
        "description": "ai",
        "peekOfCode": "client = Groq(api_key=os.environ.get(\"GROQ_API_KEY\"),)\ndef get_insights_by_llm(avg_stats, past_runs):\n    inp_message = f\"\"\"Act as a helpful running coach. \nPresent insights and key data points from the athlete's past 4 weeks of running activity in under 100 words. Sugggest a general focus for upcoming week, and suggested acticvities for next 2 days. \nAvoid mentioning obvious statistics from summary. Do not use first person voice.\nEncourage, motivate, and applaud the athlete. \nThe workout history includes various runs like long runs, tempo runs, easy runs, recovery runs, intervals, and trail run, with additional details for some activities such as lap times, average pace, and total elevation gain. Based on the recent workouts/intervals/long runs or races in last 5 workouts suggest upcoming weeks focus. Workouts are numbered by a descending order of date. Take a comprehensive approah in suggesting the workouts considering the athlete's past runs where depending on recent workouts you should suggest easy runs/ tempo runs/ intervals/ long runs/ hill workouts or a recovery run.  \nIf past runs are not available, then only suggest a general focus for the upcoming week and activities for the next 2 days. Use at most 3/4 emojis to make the message more engaging only if necessary.\nHere is the athlete's workout history.\n4 week rolling summary: {avg_stats}",
        "detail": "ai",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def start():\n   return render_template('index.html')\n@app.route(\"/training\")\ndef training():\n    return render_template('training_landing_pg.html')\n@app.route(\"/connectStrava\")\ndef connect_strava():\n    session_token = request.cookies.get('session_token')\n    if not session_token:\n        auth_url = (",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "training",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def training():\n    return render_template('training_landing_pg.html')\n@app.route(\"/connectStrava\")\ndef connect_strava():\n    session_token = request.cookies.get('session_token')\n    if not session_token:\n        auth_url = (\n        f\"https://www.strava.com/oauth/authorize?\"\n        f\"client_id={STRAVA_CLIENT_ID}&\" \n        f\"redirect_uri={url_for('strava_callback', _external=True)}&\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "connect_strava",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def connect_strava():\n    session_token = request.cookies.get('session_token')\n    if not session_token:\n        auth_url = (\n        f\"https://www.strava.com/oauth/authorize?\"\n        f\"client_id={STRAVA_CLIENT_ID}&\" \n        f\"redirect_uri={url_for('strava_callback', _external=True)}&\"\n        f\"response_type=code&\"\n        f\"approval_prompt=auto&\"\n        f\"scope=activity:read_all,activity:write\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "training_qna",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def training_qna():\n    # Retrieve athlete_id from session\n    athlete_id = session.get('athlete_id')\n    athlete_name = session.get('athlete_name')\n    if not athlete_id:\n        return redirect('/connectStrava')  # Redirect if no session\n    # Render the template with athlete_id\n    return render_template('training_qna.html', athlete_id=athlete_id, athlete_name=athlete_name)\n@app.route(\"/training_dashboard\")\ndef training_dashboard():  ",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "training_dashboard",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def training_dashboard():  \n     # Retrieve athlete_id from session\n    # athlete_id = session.get('athlete_id')\n    # athlete_name = session.get('athlete_name')\n    # if not athlete_id:\n    #     return redirect('/connectStrava')  # Redirect if no session\n    # Render the template with athlete_id\n    return render_template('training_dashboard.html', athlete_name = \"Omkar Jadhav\",athlete_id = 64768690)\n@app.route('/strava-callback')\ndef strava_callback():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "strava_callback",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def strava_callback():\n    error = request.args.get('error')\n    if error:\n        return f\"Strava authorization failed: {error}\"\n    auth_code = request.args.get('code')\n    if not auth_code:\n        return \"Authorization code missing\", 400\n    try:\n        token_response = exchange_code_for_token(auth_code)\n        athlete = token_response.get('athlete')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "exchange_code_for_token",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def exchange_code_for_token(code):\n    data = {\n        'client_id': STRAVA_CLIENT_ID,\n        'client_secret': STRAVA_CLIENT_SECRET,\n        'code': code,\n        'grant_type': 'authorization_code'\n    }\n    STRAVA_TOKEN_URL = f\"https://www.strava.com/oauth/token\"\n    response = requests.post(STRAVA_TOKEN_URL, data=data)\n    return response.json()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generate_plan",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generate_plan():\n    form_data = request.json\n    athlete_id = form_data.get('athlete_id', '')\n    month_1_activities, month_2_activities, month_3_activities = strava.get_activities_for_period(12, athlete_id, sport_type='Run')\n    all_activities_3_mnths = month_1_activities + month_2_activities + month_3_activities\n    top_3_long_runs = strava.get_top_three_longest_runs(all_activities_3_mnths)\n    races=strava.get_race_details(all_activities_3_mnths)\n    access_token = strava.get_access_token(athlete_id)\n    headers = {'Authorization': f'Bearer {access_token}'} \n    past_month_activity_dtls, athlete_baseline_stats = workout_classifier_testing.get_run_type(month_1_activities, month_1_activities[0],headers)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_goal_summary_prompt",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_goal_summary_prompt(goals):\n    goal_summary_prompt = f\"\"\"\n    Summarise this athlete goals shortly.\n    {goals}\n    \"\"\"\n    return goal_summary_prompt\ndef generate_goal_prompt(form_data, top_3_long_runs, races):\n    goal_type = form_data.get('goalType', '') \n    goal = form_data.get('goal', '')\n    target_date = form_data.get('targetDate', '')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generate_goal_prompt",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generate_goal_prompt(form_data, top_3_long_runs, races):\n    goal_type = form_data.get('goalType', '') \n    goal = form_data.get('goal', '')\n    target_date = form_data.get('targetDate', '')\n    training_days = form_data.get('trainingDays', '')\n    fitness_level = form_data.get('fitnessLevel', '')\n    recent_performance = form_data.get('recentPerformance', '')\n    strength_sessions = form_data.get('strengthSessions', '')\n    time_commitment = form_data.get('timeCommitment', '')\n    injuries = form_data.get('injuries', '')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def health_check():\n    return jsonify({\"status\": \"healthy\"})\n@app.route('/webhook', methods=['GET', 'POST'])\ndef webhook():\n    if request.method == 'GET':\n        return verify_webhook()\n    elif request.method == 'POST':\n        return handle_webhook()\n@app.route('/getCode')\ndef get_code():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "webhook",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def webhook():\n    if request.method == 'GET':\n        return verify_webhook()\n    elif request.method == 'POST':\n        return handle_webhook()\n@app.route('/getCode')\ndef get_code():\n    return render_template('code.html')\n@app.route('/saveRefreshToken', methods=['POST'])\ndef save_refresh_token():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_code",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_code():\n    return render_template('code.html')\n@app.route('/saveRefreshToken', methods=['POST'])\ndef save_refresh_token():\n    data = request.get_json()\n    refresh_token = data.get('refresh_token')\n    athlete = data.get('athlete')\n    if not (refresh_token and athlete):\n        return jsonify({\"error\": \"Invalid data format\"}), 400\n    athlete_id = athlete.get('id')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "save_refresh_token",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def save_refresh_token():\n    data = request.get_json()\n    refresh_token = data.get('refresh_token')\n    athlete = data.get('athlete')\n    if not (refresh_token and athlete):\n        return jsonify({\"error\": \"Invalid data format\"}), 400\n    athlete_id = athlete.get('id')\n    athlete_name = f\"{athlete.get('firstname')} {athlete.get('lastname')}\"\n    try:\n        client = database.initiate_mango_connection()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "auth_success_page",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def auth_success_page():\n    return render_template('authSuccessPage.html')    \n@app.route('/alreadyAuthorized')\ndef already_authorized():\n    return render_template('alreadyAuthorized.html')    \n@app.route('/submit_feedback', methods=['POST'])\ndef submit_feedback():\n    data = request.get_json()\n    athlete_id = data.get('athlete_id')\n    feedback = data.get('feedback')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "already_authorized",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def already_authorized():\n    return render_template('alreadyAuthorized.html')    \n@app.route('/submit_feedback', methods=['POST'])\ndef submit_feedback():\n    data = request.get_json()\n    athlete_id = data.get('athlete_id')\n    feedback = data.get('feedback')\n    upcoming_plan = data.get('next_week_plan')\n    try:\n        # Save feedback to the database",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "submit_feedback",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def submit_feedback():\n    data = request.get_json()\n    athlete_id = data.get('athlete_id')\n    feedback = data.get('feedback')\n    upcoming_plan = data.get('next_week_plan')\n    try:\n        # Save feedback to the database\n        database.save_feedback(athlete_id, feedback)  # Replace with your database logic\n        return jsonify({'success': True})\n    except Exception as e:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "verify_webhook",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def verify_webhook():\n    mode = request.args.get('hub.mode')\n    token = request.args.get('hub.verify_token')\n    challenge = request.args.get('hub.challenge')\n    if mode == 'subscribe' and token == VERIFY_TOKEN:\n        return jsonify({\"hub.challenge\": challenge}), 200\n    else:\n        return \"Invalid verification token\", 403\ndef handle_webhook():\n    latest_activity_id = request.json.get('object_id')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "handle_webhook",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def handle_webhook():\n    latest_activity_id = request.json.get('object_id')\n    athlete_id = request.json.get('owner_id')\n    logger.info(f\"request inputs are {request.args}\")\n    print(f\"Webhook event received with activity:{latest_activity_id} for athlete ID: {athlete_id}\")\n    inputs={\n        \"activity_id\":latest_activity_id,\n        \"athlete_id\":athlete_id\n    }\n    logger.info(f\"Inputs were{inputs}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)  # Adjust logging level as needed\napp = Flask(__name__)\napp.secret_key = os.urandom(24)  # Set a secure secret key\n# Constants\nVERIFY_TOKEN = \"STRAVA\"\nDATA_FILE = \"refresh_tokens.json\"\nSTRAVA_CLIENT_ID = os.environ.get('CLIENT_ID')\nSTRAVA_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n# Routes",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.secret_key = os.urandom(24)  # Set a secure secret key\n# Constants\nVERIFY_TOKEN = \"STRAVA\"\nDATA_FILE = \"refresh_tokens.json\"\nSTRAVA_CLIENT_ID = os.environ.get('CLIENT_ID')\nSTRAVA_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n# Routes\n@app.route(\"/\")\ndef start():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.secret_key = os.urandom(24)  # Set a secure secret key\n# Constants\nVERIFY_TOKEN = \"STRAVA\"\nDATA_FILE = \"refresh_tokens.json\"\nSTRAVA_CLIENT_ID = os.environ.get('CLIENT_ID')\nSTRAVA_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n# Routes\n@app.route(\"/\")\ndef start():\n   return render_template('index.html')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "VERIFY_TOKEN",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "VERIFY_TOKEN = \"STRAVA\"\nDATA_FILE = \"refresh_tokens.json\"\nSTRAVA_CLIENT_ID = os.environ.get('CLIENT_ID')\nSTRAVA_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n# Routes\n@app.route(\"/\")\ndef start():\n   return render_template('index.html')\n@app.route(\"/training\")\ndef training():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "DATA_FILE",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "DATA_FILE = \"refresh_tokens.json\"\nSTRAVA_CLIENT_ID = os.environ.get('CLIENT_ID')\nSTRAVA_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n# Routes\n@app.route(\"/\")\ndef start():\n   return render_template('index.html')\n@app.route(\"/training\")\ndef training():\n    return render_template('training_landing_pg.html')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "STRAVA_CLIENT_ID",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "STRAVA_CLIENT_ID = os.environ.get('CLIENT_ID')\nSTRAVA_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n# Routes\n@app.route(\"/\")\ndef start():\n   return render_template('index.html')\n@app.route(\"/training\")\ndef training():\n    return render_template('training_landing_pg.html')\n@app.route(\"/connectStrava\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "STRAVA_CLIENT_SECRET",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "STRAVA_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n# Routes\n@app.route(\"/\")\ndef start():\n   return render_template('index.html')\n@app.route(\"/training\")\ndef training():\n    return render_template('training_landing_pg.html')\n@app.route(\"/connectStrava\")\ndef connect_strava():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "initiate_mango_connection",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def initiate_mango_connection():\n    \"\"\"Connects to the MongoDB database and logs success or errors.\"\"\"\n    ca = certifi.where()  # Load the updated CA bundle\n    uri = os.environ.get(\"mango_url\")\n    logger.debug(\"Connecting to MongoDB with URI: %s\", uri)\n    try:\n        # Create a new client and connect to the server\n        client = MongoClient(uri, tlsCAFile=ca)\n        logger.info(\"Before ping!\")\n        # Send a ping to confirm a successful connection",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "check_athlete_in_data",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def check_athlete_in_data(client, athlete_id):\n    \"\"\"Checks if an athlete ID exists in the database and logs results.\"\"\"\n    logger.debug(\"Checking for athlete ID %s in database\", athlete_id)\n    db = client[\"strava\"]\n    collection = db[\"refresh tokens\"]\n    logger.info(\"before find\")\n    results = collection.find({\"athlete_id\":int(athlete_id)})\n    logger.info(results)\n    for result in results:\n        # logger.debug(\"Found document: %s\", result)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "check_session_token_in_data",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def check_session_token_in_data(client, session_token):\n    logger.info(\"Checking for session token %s in database\", session_token)\n    db = client[\"strava\"]\n    collection = db[\"refresh tokens\"]\n    results = collection.find({\"session_token\": session_token})  \n    for result in results:\n        athlete_id = result.get(\"athlete_id\")\n        expires_at = result.get(\"expires_at\", datetime.now())\n        refresh_token = result.get(\"refresh_token\")\n        previous_workout_plan = result.get(\"previous_workout_plan\", '') ",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "update_tokens",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def update_tokens(client, session_token):\n    \"\"\"Updates the tokens in the database and logs success or errors.\"\"\"\n    db = client[\"strava\"]\n    collection = db[\"refresh tokens\"]\n    try:\n        result = collection.update_one(\n            {\"session_token\": session_token},\n        )\n        logger.info(\"Updated tokens for session token %s\", session_token)\n        return result.modified_count",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "save_athlete_data",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def save_athlete_data(client, data):\n    \"\"\"Saves or updates athlete data in the database and logs success or errors.\"\"\"\n    athlete_id = data[\"athlete_id\"]\n    refresh_token = data[\"refresh_token\"]\n    athlete_name = data[\"athlete_name\"]\n    session_token = data.get(\"session_token\", '')\n    expires_at = data.get(\"expires_at\", datetime.now())\n    previous_workout_plan = data.get(\"previous_workout_plan\", '')\n    athlete_preferences = data.get(\"athlete_preferences\", '')\n    db = client[\"strava\"]",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_access_token_for_athlete",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_access_token_for_athlete(athlete_id):\n    client=initiate_mango_connection()\n    db = client[\"strava\"]\n    collection = db[\"refresh tokens\"]\n    results = collection.find({\"athlete_id\":athlete_id})\n    logger.info(results)\n    refresh_token =\"\"\n    for result in results:\n        logger.info(result)\n        refresh_token = result.get(\"refresh_token\")",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "close_client",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def close_client(client):\n    \"\"\"Closes the connection to the MongoDB client and logs it.\"\"\"\n    logger.info(\"Closing connection to MongoDB\")\n    client.close()\ndef delete_all_data(client):\n    \"\"\"Deletes all data from the collection and logs the action.\"\"\"\n    db = client[\"database-name\"]\n    collection = db[\"collection-name\"]\n    logger.info(\"Deleting all data from collection\")\n    result = collection.delete_many({})",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "delete_all_data",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def delete_all_data(client):\n    \"\"\"Deletes all data from the collection and logs the action.\"\"\"\n    db = client[\"database-name\"]\n    collection = db[\"collection-name\"]\n    logger.info(\"Deleting all data from collection\")\n    result = collection.delete_many({})\n    logger.info(\"Deleted %d documents\", result.deleted_count)\ndef test_saving():\n    client = initiate_mango_connection()\n    # delete_all_data(client)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "test_saving",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def test_saving():\n    client = initiate_mango_connection()\n    # delete_all_data(client)\n    test_json = {\n    \"athlete_id\": \"64768690\",\n        \"refresh_token\": \"239efcb1a295abda6e7d930587d120817cb5997d\",\n        \"athlete_name\": \"Omkar Jadhav\"\n    }\n    message = save_athlete_data(client,test_json)\n    refresh_token=check_athlete_in_data(client,test_json[\"athlete_id\"])",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)  # Adjust logging level as needed\ndef initiate_mango_connection():\n    \"\"\"Connects to the MongoDB database and logs success or errors.\"\"\"\n    ca = certifi.where()  # Load the updated CA bundle\n    uri = os.environ.get(\"mango_url\")\n    logger.debug(\"Connecting to MongoDB with URI: %s\", uri)\n    try:\n        # Create a new client and connect to the server\n        client = MongoClient(uri, tlsCAFile=ca)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "give_weighttraining_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_weighttraining_summary(WeightTraining_activities):\n    total_strength_training_time = 0\n    total_sessions = 0\n    for activity in WeightTraining_activities:\n        total_strength_training_time += activity[\"moving_time\"]\n        total_sessions += 1\n    avg_strength_training_session = utils.convert_seconds_in_hhmmss(round(total_strength_training_time/total_sessions, 2))\n    total_strength_training_time = utils.convert_seconds_in_hhmmss(total_strength_training_time)\n    # overall_strength_training_summary_data =[[f\"{total_sessions}   |  {avg_strength_training_session}   |  {total_strength_training_time}\"],\n    # ]",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_yoga_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_yoga_summary(yoga_activities):\n    total_yoga_time = 0\n    total_sessions = 0\n    for activity in yoga_activities:\n        total_yoga_time += activity[\"elapsed_time\"]\n        total_sessions += 1\n    avg_yoga_session = utils.convert_seconds_in_hhmmss(round(total_yoga_time/total_sessions, 2))\n    total_yoga_time = utils.convert_seconds_in_hhmmss(total_yoga_time)\n    # overall_yoga_summary_data =[\n    #     [\"Total yoga sessions:\", f\"{total_sessions}\"],",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_swim_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_swim_summary(swim_activities):\n    total_swim_time = 0\n    total_swim_sessions = 0\n    for activity in swim_activities:\n        total_swim_time += activity[\"elapsed_time\"]\n        total_swim_sessions += 1\n    avg_swim_session = utils.convert_seconds_in_hhmmss(round(total_swim_time/total_swim_sessions, 2))\n    total_swim_time = utils.convert_seconds_in_hhmmss(total_swim_time)\n    total_swim_time = convert_seconds_in_hhmmss(total_swim_time)\n    # overall_swim_summary_data =[",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_ride_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_ride_summary(ride_activities):\n    total_ride_time = 0\n    total_ride_time_hhmmss = 0\n    total_ride_sessions = 0\n    total_ride_distance = 0\n    total_elevation_gain = 0\n    for activity in ride_activities:\n        total_ride_time += activity['moving_time']\n        total_ride_sessions += 1\n        total_ride_distance += activity['distance']",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_run_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_run_summary(run_activities):\n    tot_distance_ran_month = 0\n    avg_distance_per_run = 0\n    tot_elevation_gain = 0\n    avg_elevation_gain = 0\n    tot_trail_distance = 0\n    total_runs_month = 0\n    total_trail_runs_month = 0\n    total_road_runs_month = 0\n    tot_road_distance = 0",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "give_walk_summary",
        "kind": 2,
        "importPath": "data_processing",
        "description": "data_processing",
        "peekOfCode": "def give_walk_summary(walk_activities):\n    tot_distance_walked_month = 0\n    avg_distance_per_walk = 0\n    tot_elevation_gain = 0\n    avg_elevation_gain = 0\n    tot_moving_time = 0\n    avg_mov_speed = 0\n    tot_elapsed_time = 0\n    avg_elapsed_speed = 0\n    for activity in walk_activities:",
        "detail": "data_processing",
        "documentation": {}
    },
    {
        "label": "get_access_token",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens\n    if refresh_token is not None:\n        # Retrieve the refresh_token for the athlete_id\n        logger.info('inside if refresh-token condition')\n        REFRESH_TOKEN = refresh_token",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "get_top_three_longest_runs",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def get_top_three_longest_runs(activities):\n    runs = []\n    for activity in activities:\n        if activity['type'] == 'Run':\n            distance_km = activity['distance'] / 1000  # Convert meters to kilometers\n            moving_time = activity['moving_time']\n            avg_pace_min_per_km = utils.calculate_pace_minKm(moving_time, distance_km * 1000)\n            elevation_gain = activity.get('total_elevation_gain', 0)  # Elevation in meters\n            runs.append({\n                \"distance\": round(distance_km, 2),",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "get_race_details",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def get_race_details(activities):\n    races = []\n    for activity in activities:\n        if activity.get('workout_type') == 1:  # Strava identifies races with workout_type = 1\n            distance_km = activity['distance'] / 1000  # Convert meters to kilometers\n            moving_time = activity['moving_time']\n            avg_pace_min_per_km = utils.calculate_pace_minKm(moving_time, distance_km * 1000)\n            elevation_gain = activity.get('total_elevation_gain', 0)  # Elevation in meters\n            races.append({\n                \"name\": activity.get('name', 'Unnamed Race'),",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "get_activities_for_period",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def get_activities_for_period(weeks, athlete_id, sport_type=None):\n    \"\"\"Get activities for a specific time period and sport type.\"\"\"\n    # Step 1: Retrieve Access Token\n    access_token = get_access_token(athlete_id)\n    logger.info('Access token retrieved')\n    # Step 2: Define API Endpoint and Parameters\n    BEFORE = int(time.time()) \n    AFTER = int(time.time()) - (weeks * 7 * 24 * 60 * 60)\n    activities_url = \"https://www.strava.com/api/v3/athlete/activities\"\n    headers = {'Authorization': f'Bearer {access_token}'}   ",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "get_latest_activities",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def get_latest_activities(inputs):\n    logging.info('Inside get_latest_activities')\n    latest_activity_id = inputs.get('activity_id')\n    athlete_id = inputs.get('athlete_id')\n    # Step 1: Retrieve Access Token\n    access_token = get_access_token(athlete_id)\n    logging.info('Access token retrieved')\n    # Step 2: Define API Endpoint and Parameters\n    BEFORE = int(time.time()) \n    AFTER = int(time.time()) - (28 * 24 * 60 * 60)  # Exactly 4 weeks",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "fetch_complete_activity_detail",
        "kind": 2,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "def fetch_complete_activity_detail(activty_id, headers):\n    \"\"\"Fetch complete activity details.\"\"\"\n    activity_url = f\"https://www.strava.com/api/v3/activities/{activty_id}\"\n    response = requests.get(activity_url, headers)\n    if response.status_code == 200:\n        return response.json()\n    return None",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)  # Adjust logging level as needed\n# Replace these with your Strava API credentials\nCLIENT_ID = os.environ.get('CLIENT_ID')\nCLIENT_SECRET =  os.environ.get('CLIENT_SECRET')\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "CLIENT_ID = os.environ.get('CLIENT_ID')\nCLIENT_SECRET =  os.environ.get('CLIENT_SECRET')\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens\n    if refresh_token is not None:",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": "strava",
        "description": "strava",
        "peekOfCode": "CLIENT_SECRET =  os.environ.get('CLIENT_SECRET')\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens\n    if refresh_token is not None:\n        # Retrieve the refresh_token for the athlete_id",
        "detail": "strava",
        "documentation": {}
    },
    {
        "label": "get_access_token",
        "kind": 2,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "def get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens\n    if refresh_token is not None:\n        # Retrieve the refresh_token for the athlete_id\n        logger.info('inside if refresh-token condition')\n        REFRESH_TOKEN = refresh_token",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "get_latest_activities",
        "kind": 2,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "def get_latest_activities(inputs):\n    logging.info('Inside get_latest_activities')\n    latest_activity_id = inputs.get('activity_id')\n    athlete_id = inputs.get('athlete_id')\n    # Step 1: Retrieve Access Token\n    access_token = get_access_token(athlete_id)\n    logging.info('Access token retrieved')\n    # Step 2: Define API Endpoint and Parameters\n    BEFORE = int(time.time()) \n    AFTER = int(time.time()) - (28 * 24 * 60 * 60)  # Exactly 4 weeks",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "format_prompt_for_llm",
        "kind": 2,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "def format_prompt_for_llm(athlete_goal, athlete_baseline, past_3m_summarised, past_month_runs_details):\n    athlete_baseline['speed_mean']=utils.convert_speed_to_pace(athlete_baseline['speed_mean'])\n    athlete_baseline['speed_std']=utils.convert_speed_to_pace(athlete_baseline['speed_std'])\n    prompt =f\"\"\"\n    You are a professional running coach who provides the workout plans according to athlete goals, current conditions and recent runs. Today is {datetime.now().strftime(\"%B %d, %Y\")}.\n    The athlete's goal is - {athlete_goal}. \n    The athlete's baseline stats are as follows: {\", \".join(f\"{key}={value}\" for key, value in athlete_baseline.items() if key != \"speed_std\")}.\n    Athlete's past 3 months activity can be summarised as: {past_3m_summarised}\n    The athlete's past months workout history is: {past_month_runs_details} \n    First Mention an birds eye view of how the plan will look like to reach the goal. ",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "fetch_complete_activity_detail",
        "kind": 2,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "def fetch_complete_activity_detail(activty_id, headers):\n    \"\"\"Fetch complete activity details.\"\"\"\n    activity_url = f\"https://www.strava.com/api/v3/activities/{activty_id}\"\n    response = requests.get(activity_url, headers)\n    if response.status_code == 200:\n        return response.json()\n    return None",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)  # Adjust logging level as needed\n# Replace these with your Strava API credentials\nCLIENT_ID = os.environ.get('CLIENT_ID')\nCLIENT_SECRET =  os.environ.get('CLIENT_SECRET')\n# REFRESH_TOKEN = '239efcb1a295abda6e7d930587d120817cb5997d'\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "CLIENT_ID = os.environ.get('CLIENT_ID')\nCLIENT_SECRET =  os.environ.get('CLIENT_SECRET')\n# REFRESH_TOKEN = '239efcb1a295abda6e7d930587d120817cb5997d'\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": "strava_v2_testing",
        "description": "strava_v2_testing",
        "peekOfCode": "CLIENT_SECRET =  os.environ.get('CLIENT_SECRET')\n# REFRESH_TOKEN = '239efcb1a295abda6e7d930587d120817cb5997d'\n# Step 1: Get Access Token (you may do this once to obtain the token)\ndef get_access_token(athlete_id):\n    client = database.initiate_mango_connection()\n    refresh_token = database.check_athlete_in_data(client,athlete_id)\n    database.close_client(client)\n    logger.info(f'Refresh token{refresh_token} for athlete ID {athlete_id}')\n    # Check if the athlete_id exists in the refresh_tokens\n    if refresh_token is not None:",
        "detail": "strava_v2_testing",
        "documentation": {}
    },
    {
        "label": "uri",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "uri = \"mongodb+srv://omkarjadhav00:mango@strava-token.6r1ebob.mongodb.net/?ssl=true&ssl_cert_reqs=CERT_NONE&retryWrites=true&w=majority\"\n# Create a new client and connect to the server\nclient = MongoClient(uri)\n# Send a ping to confirm a successful connection\ntry:\n    client.admin.command('ping')\n    print(\"Pinged your deployment. You successfully connected to MongoDB!\")\nexcept Exception as e:\n    print(e)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "client = MongoClient(uri)\n# Send a ping to confirm a successful connection\ntry:\n    client.admin.command('ping')\n    print(\"Pinged your deployment. You successfully connected to MongoDB!\")\nexcept Exception as e:\n    print(e)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "test_plan",
        "description": "test_plan",
        "peekOfCode": "url = \"https://localhost/generatePlan\"\nform_data = {'goalType': 'specific', 'goal': '100Km ultra trail with 5000m elevation', 'targetDate': '2025-03-09', 'trainingDays': '5', 'fitnessLevel': 'intermediate', 'recentPerformance': '100Km ultra trail 3380D+ in 19:30, marathon in 3:45', 'strengthSessions': '4', 'timeCommitment': '1.5hr', 'injuries': '', 'preferences': 'Long runs and long trails on weekends only', 'specialConditions': '', 'otherInfo': '', 'athlete_id': '64768690'}\nform_data = json.dumps(form_data)\nresponse = requests.post(url, json=form_data)\n# Print the response\nif response.status_code == 200:\n    print(\"Response from server:\")\n    print(response.json())\nelse:\n    print(f\"Error: {response.status_code}\")",
        "detail": "test_plan",
        "documentation": {}
    },
    {
        "label": "form_data",
        "kind": 5,
        "importPath": "test_plan",
        "description": "test_plan",
        "peekOfCode": "form_data = {'goalType': 'specific', 'goal': '100Km ultra trail with 5000m elevation', 'targetDate': '2025-03-09', 'trainingDays': '5', 'fitnessLevel': 'intermediate', 'recentPerformance': '100Km ultra trail 3380D+ in 19:30, marathon in 3:45', 'strengthSessions': '4', 'timeCommitment': '1.5hr', 'injuries': '', 'preferences': 'Long runs and long trails on weekends only', 'specialConditions': '', 'otherInfo': '', 'athlete_id': '64768690'}\nform_data = json.dumps(form_data)\nresponse = requests.post(url, json=form_data)\n# Print the response\nif response.status_code == 200:\n    print(\"Response from server:\")\n    print(response.json())\nelse:\n    print(f\"Error: {response.status_code}\")\n    print(response.text)",
        "detail": "test_plan",
        "documentation": {}
    },
    {
        "label": "form_data",
        "kind": 5,
        "importPath": "test_plan",
        "description": "test_plan",
        "peekOfCode": "form_data = json.dumps(form_data)\nresponse = requests.post(url, json=form_data)\n# Print the response\nif response.status_code == 200:\n    print(\"Response from server:\")\n    print(response.json())\nelse:\n    print(f\"Error: {response.status_code}\")\n    print(response.text)",
        "detail": "test_plan",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "test_plan",
        "description": "test_plan",
        "peekOfCode": "response = requests.post(url, json=form_data)\n# Print the response\nif response.status_code == 200:\n    print(\"Response from server:\")\n    print(response.json())\nelse:\n    print(f\"Error: {response.status_code}\")\n    print(response.text)",
        "detail": "test_plan",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "test_strava_activity",
        "description": "test_strava_activity",
        "peekOfCode": "headers = {'Authorization': f'Bearer {access_token}'}   \nactivity_id =115832357\nlatest_activity_url = f\"https://www.strava.com/api/v3/activities/{activity_id}\"\n# latest_activity_url = f\"https://www.strava.com/api/v3/recent_run_totals\"\n# latest_activity_response = utils.make_url_request(activity_url=latest_activity_url, headers=headers)\n# if latest_activity_response:\n#     latest_activity_data = latest_activity_response.json()\n# latest_activity_id = latest_activity_data.id\nathlete_id = 64768690\ninputs={",
        "detail": "test_strava_activity",
        "documentation": {}
    },
    {
        "label": "latest_activity_url",
        "kind": 5,
        "importPath": "test_strava_activity",
        "description": "test_strava_activity",
        "peekOfCode": "latest_activity_url = f\"https://www.strava.com/api/v3/activities/{activity_id}\"\n# latest_activity_url = f\"https://www.strava.com/api/v3/recent_run_totals\"\n# latest_activity_response = utils.make_url_request(activity_url=latest_activity_url, headers=headers)\n# if latest_activity_response:\n#     latest_activity_data = latest_activity_response.json()\n# latest_activity_id = latest_activity_data.id\nathlete_id = 64768690\ninputs={\n        \"activity_id\":activity_id,\n        \"athlete_id\":athlete_id",
        "detail": "test_strava_activity",
        "documentation": {}
    },
    {
        "label": "athlete_id",
        "kind": 5,
        "importPath": "test_strava_activity",
        "description": "test_strava_activity",
        "peekOfCode": "athlete_id = 64768690\ninputs={\n        \"activity_id\":activity_id,\n        \"athlete_id\":athlete_id\n    }\n# strava2.get_latest_activities(inputs)\n# print(latest_activity_data)",
        "detail": "test_strava_activity",
        "documentation": {}
    },
    {
        "label": "update_activity",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def update_activity(activity_url, update_json, headers):\n    update_response = requests.put(activity_url, headers=headers, json=update_json)\n    if update_response.status_code == 200:\n        message =\"Activity description updated successfully.\"\n    else:\n        message=f\"Error updating activity description: {update_response.status_code}, Error description : {update_response.text}\"\n    return message\ndef make_url_request(activity_url, headers):\n    activity_response = requests.get(activity_url, headers=headers)\n    if(activity_response.status_code == 200):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "make_url_request",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def make_url_request(activity_url, headers):\n    activity_response = requests.get(activity_url, headers=headers)\n    if(activity_response.status_code == 200):\n        return activity_response\n    else:\n            print(f\"Error while getting activity: {activity_response.status_code}, Error description : {activity_response.text}\")\ndef update_description(activity_data, summary):\n    description = activity_data['description']\n    if description == \"\" or description is None:\n        updated_description = f\"{summary}\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "update_description",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def update_description(activity_data, summary):\n    description = activity_data['description']\n    if description == \"\" or description is None:\n        updated_description = f\"{summary}\"\n    else:    \n        updated_description = f\"{description} {summary}\"\n    update_json = {\"description\": updated_description}\n    return update_json\ndef convert_seconds_in_hhmmss(seconds):\n    hours = int(seconds//3600)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "convert_seconds_in_hhmmss",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def convert_seconds_in_hhmmss(seconds):\n    hours = int(seconds//3600)\n    minutes = int((seconds%3600)//60)\n    seconds = int(seconds % 60)\n    return str(hours).zfill(2) +':' + str(minutes).zfill(2) +':'+ str(seconds).zfill(2)\ndef convert_speed_to_pace(speed_m_per_s):\n    if speed_m_per_s <= 0:\n        return \"Speed must be greater than 0\"\n    # Convert speed to pace in min/km\n    pace_min_per_km = (1000 / speed_m_per_s) / 60",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "convert_speed_to_pace",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def convert_speed_to_pace(speed_m_per_s):\n    if speed_m_per_s <= 0:\n        return \"Speed must be greater than 0\"\n    # Convert speed to pace in min/km\n    pace_min_per_km = (1000 / speed_m_per_s) / 60\n    minutes = int(pace_min_per_km)  # Whole minutes\n    seconds = int((pace_min_per_km - minutes) * 60)  # Remaining seconds\n    return f\"{minutes}:{seconds:02d} min/km\"\ndef pace_to_speed(pace_str):\n    \"\"\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "pace_to_speed",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def pace_to_speed(pace_str):\n    \"\"\"\n    Convert a pace string in the format 'mm:ss min/km' to speed in m/s.\n    \"\"\"\n    # Split the string into minutes and seconds\n    pace_str = pace_str.replace(\" min/km\", \"\")\n    minutes, seconds = map(int, pace_str.split(\":\"))\n    # Convert pace (min/km) to total seconds per kilometer\n    total_seconds_per_km = minutes * 60 + seconds\n    # Convert to speed in m/s (meters per second)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_speed",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def calculate_speed(moving_time, distance):\n    if distance == 0:\n        return \"00:00 min/Km\"\n    else:\n        mov_speed_min, mov_speed_sec = map(int, divmod(moving_time / distance, 60))\n        return f\"{mov_speed_min:02d}:{mov_speed_sec:02d} min/Km\"\ndef calculate_speed_in_kmph(moving_time, distance):\n    if moving_time == 0:\n        return \"0.00 km/hr\"\n    else:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_speed_in_kmph",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def calculate_speed_in_kmph(moving_time, distance):\n    if moving_time == 0:\n        return \"0.00 km/hr\"\n    else:\n        speed_kph = (distance / 1000) / (moving_time / 3600)\n        return f\"{speed_kph:.2f} km/hr\"\ndef calculate_pace_minKm(moving_time, distance):\n    if distance == 0:\n        return \"00:00 min/Km\"\n    else:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_pace_minKm",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def calculate_pace_minKm(moving_time, distance):\n    if distance == 0:\n        return \"00:00 min/Km\"\n    else:\n        pace_seconds_per_km = moving_time / (distance / 1000)\n        pace_minutes = int(pace_seconds_per_km // 60)\n        pace_seconds = int(pace_seconds_per_km % 60)\n        return f\"{pace_minutes:02d}:{pace_seconds:02d} min/Km\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "WorkoutClassifier",
        "kind": 6,
        "importPath": "workout_classifier",
        "description": "workout_classifier",
        "peekOfCode": "class WorkoutClassifier:\n    def __init__(self, activities, headers):\n        self.activities = activities if activities else []\n        self.headers = headers if headers else {}\n        self._validate_inputs()\n        # Initialize components with error handling\n        try:\n            self.stats = self._calculate_statistical_baselines()\n            self.sport_profiles = self._create_sport_profiles()\n            self.athlete_baselines = self._calculate_athlete_baselines()",
        "detail": "workout_classifier",
        "documentation": {}
    },
    {
        "label": "get_run_type",
        "kind": 2,
        "importPath": "workout_classifier",
        "description": "workout_classifier",
        "peekOfCode": "def get_run_type(activities, headers):\n    \"\"\"Public API with complete validation\"\"\"\n    try:\n        if not activities or not headers:\n            logger.error(\"Invalid input: empty activities or headers\")\n            return []\n        if not isinstance(activities, list) or not isinstance(headers, dict):\n            logger.error(\"Invalid input types\")\n            return []\n        classifier = WorkoutClassifier(activities, headers)",
        "detail": "workout_classifier",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "workout_classifier",
        "description": "workout_classifier",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\nclass WorkoutClassifier:\n    def __init__(self, activities, headers):\n        self.activities = activities if activities else []\n        self.headers = headers if headers else {}\n        self._validate_inputs()\n        # Initialize components with error handling\n        try:\n            self.stats = self._calculate_statistical_baselines()",
        "detail": "workout_classifier",
        "documentation": {}
    },
    {
        "label": "WorkoutClassifier",
        "kind": 6,
        "importPath": "workout_classifier_testing",
        "description": "workout_classifier_testing",
        "peekOfCode": "class WorkoutClassifier:\n    def __init__(self, activities, headers):\n        self.activities = activities if activities else []\n        self.headers = headers if headers else {}\n        self._validate_inputs()\n        # Initialize components with error handling\n        try:\n            self.stats = self._calculate_statistical_baselines()\n            self.sport_profiles = self._create_sport_profiles()\n            self.athlete_baselines = self._calculate_athlete_baselines()",
        "detail": "workout_classifier_testing",
        "documentation": {}
    },
    {
        "label": "get_run_type",
        "kind": 2,
        "importPath": "workout_classifier_testing",
        "description": "workout_classifier_testing",
        "peekOfCode": "def get_run_type(activities,latest_activity,  headers, ):\n    \"\"\"Public API with complete validation\"\"\"\n    try:\n        if not activities or not headers:\n            logger.error(\"Invalid input: empty activities or headers\")\n            return []\n        if not isinstance(activities, list) or not isinstance(headers, dict):\n            logger.error(\"Invalid input types\")\n            return []\n        classifier = WorkoutClassifier(activities, headers)",
        "detail": "workout_classifier_testing",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "workout_classifier_testing",
        "description": "workout_classifier_testing",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\nclass WorkoutClassifier:\n    def __init__(self, activities, headers):\n        self.activities = activities if activities else []\n        self.headers = headers if headers else {}\n        self._validate_inputs()\n        # Initialize components with error handling\n        try:\n            self.stats = self._calculate_statistical_baselines()",
        "detail": "workout_classifier_testing",
        "documentation": {}
    }
]